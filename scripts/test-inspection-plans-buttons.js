const puppeteer = require('puppeteer');

async function testInspectionPlansButtons() {
  console.log('üß™ Testando bot√µes de planos de inspe√ß√£o...');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  try {
    const page = await browser.newPage();
    
    // Configurar viewport
    await page.setViewport({ width: 1920, height: 1080 });
    
    // Navegar para a p√°gina de planos de inspe√ß√£o
    console.log('üì± Navegando para a p√°gina de planos de inspe√ß√£o...');
    await page.goto('https://enso-frontend-pp6s.onrender.com/inspection-plans', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    
    // Aguardar carregamento da p√°gina
    await page.waitForTimeout(3000);
    
    // Verificar se a p√°gina carregou corretamente
    const pageTitle = await page.title();
    console.log('üìÑ T√≠tulo da p√°gina:', pageTitle);
    
    // Verificar se h√° planos carregados
    const plansCount = await page.evaluate(() => {
      const cards = document.querySelectorAll('[class*="Card"]');
      return cards.length;
    });
    console.log('üìä N√∫mero de planos encontrados:', plansCount);
    
    // Testar bot√£o "Novo Plano"
    console.log('üîò Testando bot√£o "Novo Plano"...');
    const novoPlanoButton = await page.$('button:has-text("Novo Plano")');
    if (novoPlanoButton) {
      console.log('‚úÖ Bot√£o "Novo Plano" encontrado');
      
      // Verificar se o bot√£o est√° vis√≠vel e clic√°vel
      const isVisible = await novoPlanoButton.isVisible();
      const isEnabled = await novoPlanoButton.isEnabled();
      console.log('üëÅÔ∏è Bot√£o vis√≠vel:', isVisible);
      console.log('‚úÖ Bot√£o habilitado:', isEnabled);
      
      // Tentar clicar no bot√£o
      try {
        await novoPlanoButton.click();
        console.log('‚úÖ Clique no bot√£o "Novo Plano" realizado');
        
        // Aguardar modal aparecer
        await page.waitForTimeout(2000);
        
        // Verificar se o modal apareceu
        const modal = await page.$('[role="dialog"]');
        if (modal) {
          console.log('‚úÖ Modal de cria√ß√£o apareceu');
        } else {
          console.log('‚ùå Modal de cria√ß√£o n√£o apareceu');
        }
        
        // Fechar modal se existir
        const closeButton = await page.$('button:has-text("Cancelar"), button:has-text("Fechar"), [aria-label="Close"]');
        if (closeButton) {
          await closeButton.click();
          console.log('‚úÖ Modal fechado');
        }
        
      } catch (error) {
        console.log('‚ùå Erro ao clicar no bot√£o "Novo Plano":', error.message);
      }
    } else {
      console.log('‚ùå Bot√£o "Novo Plano" n√£o encontrado');
    }
    
    // Testar bot√µes de a√ß√£o nos planos (se existirem)
    if (plansCount > 0) {
      console.log('üîò Testando bot√µes de a√ß√£o nos planos...');
      
      // Verificar bot√µes de a√ß√£o
      const actionButtons = await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.map(btn => ({
          text: btn.textContent?.trim(),
          visible: btn.offsetParent !== null,
          enabled: !btn.disabled,
          classes: btn.className
        })).filter(btn => 
          btn.text && (
            btn.text.includes('Visualizar') || 
            btn.text.includes('Editar') || 
            btn.text.includes('Deletar') ||
            btn.text.includes('Excluir')
          )
        );
      });
      
      console.log('üîç Bot√µes de a√ß√£o encontrados:', actionButtons.length);
      actionButtons.forEach((btn, index) => {
        console.log(`  ${index + 1}. "${btn.text}" - Vis√≠vel: ${btn.visible}, Habilitado: ${btn.enabled}`);
      });
      
      // Testar primeiro bot√£o de a√ß√£o (se existir)
      if (actionButtons.length > 0) {
        const firstActionButton = await page.$('button:has-text("Visualizar"), button:has-text("Editar")');
        if (firstActionButton) {
          console.log('üîò Testando primeiro bot√£o de a√ß√£o...');
          
          try {
            await firstActionButton.click();
            console.log('‚úÖ Clique no bot√£o de a√ß√£o realizado');
            
            // Aguardar poss√≠vel modal
            await page.waitForTimeout(2000);
            
            // Verificar se algum modal apareceu
            const modal = await page.$('[role="dialog"]');
            if (modal) {
              console.log('‚úÖ Modal de a√ß√£o apareceu');
              
              // Fechar modal
              const closeButton = await page.$('button:has-text("Fechar"), [aria-label="Close"]');
              if (closeButton) {
                await closeButton.click();
                console.log('‚úÖ Modal fechado');
              }
            } else {
              console.log('‚ÑπÔ∏è Nenhum modal apareceu (pode ser normal)');
            }
            
          } catch (error) {
            console.log('‚ùå Erro ao clicar no bot√£o de a√ß√£o:', error.message);
          }
        }
      }
    }
    
    // Verificar erros no console
    const consoleErrors = await page.evaluate(() => {
      return window.consoleErrors || [];
    });
    
    if (consoleErrors.length > 0) {
      console.log('‚ö†Ô∏è Erros encontrados no console:');
      consoleErrors.forEach(error => console.log('  -', error));
    } else {
      console.log('‚úÖ Nenhum erro encontrado no console');
    }
    
    // Verificar se h√° problemas de CSS
    const cssIssues = await page.evaluate(() => {
      const issues = [];
      
      // Verificar se h√° elementos com pointer-events: none
      const noPointerEvents = document.querySelectorAll('[style*="pointer-events: none"]');
      if (noPointerEvents.length > 0) {
        issues.push(`${noPointerEvents.length} elementos com pointer-events: none`);
      }
      
      // Verificar se h√° elementos com z-index muito baixo
      const lowZIndex = document.querySelectorAll('[style*="z-index: -"]');
      if (lowZIndex.length > 0) {
        issues.push(`${lowZIndex.length} elementos com z-index negativo`);
      }
      
      // Verificar se h√° elementos sobrepostos
      const overlays = document.querySelectorAll('[class*="overlay"], [class*="backdrop"]');
      if (overlays.length > 0) {
        issues.push(`${overlays.length} elementos de overlay encontrados`);
      }
      
      return issues;
    });
    
    if (cssIssues.length > 0) {
      console.log('‚ö†Ô∏è Problemas de CSS encontrados:');
      cssIssues.forEach(issue => console.log('  -', issue));
    } else {
      console.log('‚úÖ Nenhum problema de CSS detectado');
    }
    
    console.log('‚úÖ Teste conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await browser.close();
  }
}

// Capturar erros do console
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// Executar teste
testInspectionPlansButtons().catch(console.error);
