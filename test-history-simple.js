// TESTE SIMPLES DO SISTEMA DE HIST√ìRICO
// Execute este script no console do navegador

console.log('üß™ TESTE SIMPLES DO SISTEMA DE HIST√ìRICO');

// ========================================
// 1. VERIFICAR SE O SERVI√áO EST√Å DISPON√çVEL
// ========================================

// Verificar se o servi√ßo est√° no window
if (typeof window.productHistoryService !== 'undefined') {
  console.log('‚úÖ Servi√ßo de hist√≥rico encontrado no window');
} else {
  console.log('‚ùå Servi√ßo de hist√≥rico n√£o encontrado no window');
}

// Verificar se o servi√ßo est√° dispon√≠vel via import
try {
  // Tentar acessar o servi√ßo
  if (window.productHistoryService) {
    console.log('‚úÖ Servi√ßo acess√≠vel:', window.productHistoryService);
    
    // Testar m√©todo getProductHistory
    const testHistory = window.productHistoryService.getProductHistory('test-id');
    console.log('‚úÖ M√©todo getProductHistory funcionando:', testHistory);
    
    // Testar m√©todo getAllHistory
    const allHistory = window.productHistoryService.getAllHistory();
    console.log('‚úÖ M√©todo getAllHistory funcionando:', allHistory);
    
  } else {
    console.log('‚ùå Servi√ßo n√£o est√° dispon√≠vel');
  }
} catch (error) {
  console.log('‚ùå Erro ao acessar servi√ßo:', error);
}

// ========================================
// 2. VERIFICAR LOCALSTORAGE
// ========================================

try {
  const historyData = localStorage.getItem('product_history');
  if (historyData) {
    const history = JSON.parse(historyData);
    console.log('üìä Dados no localStorage:', {
      total: history.length,
      actions: history.map(h => h.action),
      products: [...new Set(history.map(h => h.productCode))]
    });
  } else {
    console.log('üì≠ Nenhum dado de hist√≥rico no localStorage');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar localStorage:', error);
}

// ========================================
// 3. VERIFICAR BOT√ïES DE HIST√ìRICO
// ========================================

const historyButtons = document.querySelectorAll('button[title*="hist√≥rico"], button[title*="history"]');
console.log('üîò Bot√µes de hist√≥rico encontrados:', historyButtons.length);

if (historyButtons.length > 0) {
  console.log('‚úÖ Bot√µes de hist√≥rico est√£o presentes');
  historyButtons.forEach((btn, index) => {
    console.log(`  ${index + 1}. ${btn.title || btn.textContent}`);
  });
} else {
  console.log('‚ùå Nenhum bot√£o de hist√≥rico encontrado');
}

// ========================================
// 4. VERIFICAR MODAL
// ========================================

const modal = document.querySelector('[class*="modal"], [class*="dialog"]');
if (modal) {
  console.log('‚úÖ Modal encontrado:', modal);
} else {
  console.log('üì≠ Nenhum modal encontrado (normal se n√£o estiver aberto)');
}

// ========================================
// 5. TESTAR CRIA√á√ÉO DE HIST√ìRICO
// ========================================

if (window.productHistoryService) {
  try {
    const testProduct = {
      id: 'test-' + Date.now(),
      code: 'TEST' + Date.now(),
      description: 'Produto de teste',
      category: 'Teste',
      created_at: new Date().toISOString()
    };
    
    const entry = window.productHistoryService.recordProductCreated(
      testProduct,
      'test-user',
      'Usu√°rio Teste'
    );
    
    console.log('‚úÖ Hist√≥rico criado com sucesso:', entry);
    
    // Verificar se foi salvo no localStorage
    const updatedHistory = localStorage.getItem('product_history');
    if (updatedHistory) {
      const parsed = JSON.parse(updatedHistory);
      console.log('‚úÖ Hist√≥rico salvo no localStorage:', parsed.length, 'registros');
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao criar hist√≥rico:', error);
  }
}

// ========================================
// 6. FUN√á√ïES DE DEBUG
// ========================================

// Fun√ß√£o para mostrar hist√≥rico
window.showHistory = function() {
  if (window.productHistoryService) {
    const history = window.productHistoryService.getAllHistory();
    console.table(history.map(h => ({
      produto: h.productCode,
      acao: h.action,
      usuario: h.userName,
      data: new Date(h.timestamp).toLocaleString(),
      descricao: h.description
    })));
  } else {
    console.log('‚ùå Servi√ßo n√£o dispon√≠vel');
  }
};

// Fun√ß√£o para limpar hist√≥rico
window.clearHistory = function() {
  if (window.productHistoryService) {
    window.productHistoryService.clearAllHistory();
    console.log('üóëÔ∏è Hist√≥rico limpo');
  } else {
    localStorage.removeItem('product_history');
    console.log('üóëÔ∏è Hist√≥rico limpo do localStorage');
  }
};

// Fun√ß√£o para testar modal
window.testModal = function() {
  const buttons = document.querySelectorAll('button[title*="hist√≥rico"], button[title*="history"]');
  if (buttons.length > 0) {
    buttons[0].click();
    console.log('üñ±Ô∏è Clique simulado no bot√£o de hist√≥rico');
  } else {
    console.log('‚ùå Nenhum bot√£o de hist√≥rico encontrado');
  }
};

console.log('\nüõ†Ô∏è FUN√á√ïES DE DEBUG DISPON√çVEIS:');
console.log('- showHistory(): Mostrar hist√≥rico');
console.log('- clearHistory(): Limpar hist√≥rico');
console.log('- testModal(): Testar modal');

console.log('\n‚úÖ TESTE CONCLU√çDO!');
