#!/bin/bash

# üöÄ ControlFlow - Setup Automatizado
# Este script configura automaticamente o ControlFlow em uma nova m√°quina

set -e  # Para o script se houver erro

echo "üöÄ Iniciando setup do ControlFlow..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se o Docker est√° instalado
check_docker() {
    print_status "Verificando se o Docker est√° instalado..."
    if ! command -v docker &> /dev/null; then
        print_error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
        exit 1
    fi
    
    print_success "Docker e Docker Compose encontrados!"
}

# Verificar se o Git est√° instalado
check_git() {
    print_status "Verificando se o Git est√° instalado..."
    if ! command -v git &> /dev/null; then
        print_error "Git n√£o est√° instalado. Por favor, instale o Git primeiro."
        exit 1
    fi
    print_success "Git encontrado!"
}

# Configurar arquivo .env
setup_env() {
    print_status "Configurando vari√°veis de ambiente..."
    
    if [ ! -f .env ]; then
        if [ -f env.example ]; then
            cp env.example .env
            print_success "Arquivo .env criado a partir do env.example"
        else
            print_warning "Arquivo env.example n√£o encontrado. Criando .env b√°sico..."
            cat > .env << EOF
# Database
DATABASE_URL=postgresql://controlflow_db:123@localhost:5432/controlflow_db

# JWT
JWT_SECRET=controlflow-jwt-secret-key-2024-development
SESSION_SECRET=controlflow-session-secret-2024

# Server
PORT=5002
NODE_ENV=development

# Upload
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760

# Logging
LOG_LEVEL=info
EOF
            print_success "Arquivo .env criado com configura√ß√µes b√°sicas"
        fi
    else
        print_warning "Arquivo .env j√° existe. Mantendo configura√ß√µes atuais."
    fi
}

# Criar diret√≥rios necess√°rios
create_directories() {
    print_status "Criando diret√≥rios necess√°rios..."
    
    mkdir -p uploads
    mkdir -p logs
    print_success "Diret√≥rios criados!"
}

# Verificar se as portas est√£o dispon√≠veis
check_ports() {
    print_status "Verificando se as portas necess√°rias est√£o dispon√≠veis..."
    
    if lsof -Pi :5002 -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_warning "Porta 5002 j√° est√° em uso. Verifique se n√£o h√° outra inst√¢ncia rodando."
        read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    if lsof -Pi :5432 -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_warning "Porta 5432 (PostgreSQL) j√° est√° em uso. Verifique se n√£o h√° outro PostgreSQL rodando."
        read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    print_success "Portas verificadas!"
}

# Build e inicializa√ß√£o do Docker
setup_docker() {
    print_status "Iniciando build das imagens Docker..."
    
    # Parar containers existentes se houver
    docker-compose down 2>/dev/null || true
    
    # Build das imagens
    docker-compose build
    
    print_success "Build das imagens conclu√≠do!"
}

# Iniciar servi√ßos
start_services() {
    print_status "Iniciando servi√ßos..."
    
    docker-compose up -d
    
    print_success "Servi√ßos iniciados!"
}

# Aguardar servi√ßos ficarem prontos
wait_for_services() {
    print_status "Aguardando servi√ßos ficarem prontos..."
    
    # Aguardar PostgreSQL
    print_status "Aguardando PostgreSQL..."
    timeout=60
    counter=0
    while ! docker-compose exec -T controlflow_postgres pg_isready -U controlflow_db >/dev/null 2>&1; do
        sleep 1
        counter=$((counter + 1))
        if [ $counter -ge $timeout ]; then
            print_error "Timeout aguardando PostgreSQL ficar pronto"
            exit 1
        fi
    done
    print_success "PostgreSQL est√° pronto!"
    
    # Aguardar aplica√ß√£o
    print_status "Aguardando aplica√ß√£o..."
    timeout=120
    counter=0
    while ! curl -f http://localhost:5002/health >/dev/null 2>&1; do
        sleep 2
        counter=$((counter + 2))
        if [ $counter -ge $timeout ]; then
            print_error "Timeout aguardando aplica√ß√£o ficar pronta"
            print_status "Verificando logs da aplica√ß√£o..."
            docker-compose logs controlflow_app
            exit 1
        fi
    done
    print_success "Aplica√ß√£o est√° pronta!"
}

# Verificar status dos servi√ßos
check_services() {
    print_status "Verificando status dos servi√ßos..."
    
    if docker-compose ps | grep -q "Up"; then
        print_success "Todos os servi√ßos est√£o rodando!"
    else
        print_error "Alguns servi√ßos n√£o est√£o rodando. Verifique os logs:"
        docker-compose logs
        exit 1
    fi
}

# Mostrar informa√ß√µes finais
show_final_info() {
    echo
    echo "üéâ Setup conclu√≠do com sucesso!"
    echo
    echo "üìã Informa√ß√µes importantes:"
    echo "   ‚Ä¢ Frontend: http://localhost:5002"
    echo "   ‚Ä¢ API: http://localhost:5002/api"
    echo "   ‚Ä¢ Health Check: http://localhost:5002/health"
    echo
    echo "üîß Comandos √∫teis:"
    echo "   ‚Ä¢ Ver logs: docker-compose logs -f"
    echo "   ‚Ä¢ Parar servi√ßos: docker-compose down"
    echo "   ‚Ä¢ Reiniciar: docker-compose restart"
    echo "   ‚Ä¢ Rebuild: docker-compose up --build"
    echo
    echo "üìö Documenta√ß√£o:"
    echo "   ‚Ä¢ Setup completo: docs/SETUP_COMPLETO.md"
    echo "   ‚Ä¢ README: README.md"
    echo
    echo "üöÄ O ControlFlow est√° pronto para uso!"
}

# Fun√ß√£o principal
main() {
    echo "üöÄ ControlFlow - Setup Automatizado"
    echo "=================================="
    echo
    
    check_docker
    check_git
    setup_env
    create_directories
    check_ports
    setup_docker
    start_services
    wait_for_services
    check_services
    show_final_info
}

# Executar fun√ß√£o principal
main "$@"
