// VERIFICAR SISTEMA DE HIST√ìRICO NO FRONTEND
// Execute este script no console do navegador

console.log('üîç VERIFICANDO SISTEMA DE HIST√ìRICO DE PRODUTOS');

// ========================================
// 1. VERIFICAR SE O SERVI√áO EST√Å CARREGADO
// ========================================

try {
  // Verificar se o servi√ßo est√° dispon√≠vel
  if (typeof window.productHistoryService !== 'undefined') {
    console.log('‚úÖ Servi√ßo de hist√≥rico carregado:', window.productHistoryService);
  } else {
    console.log('‚ùå Servi√ßo de hist√≥rico n√£o encontrado no window');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar servi√ßo:', error);
}

// ========================================
// 2. VERIFICAR LOCALSTORAGE
// ========================================

try {
  const historyData = localStorage.getItem('product_history');
  if (historyData) {
    const history = JSON.parse(historyData);
    console.log('üìä Dados no localStorage:', {
      total: history.length,
      actions: history.map(h => h.action),
      products: [...new Set(history.map(h => h.productCode))]
    });
  } else {
    console.log('üì≠ Nenhum dado de hist√≥rico no localStorage');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar localStorage:', error);
}

// ========================================
// 3. VERIFICAR COMPONENTES REACT
// ========================================

// Fun√ß√£o para verificar se o modal est√° montado
function checkHistoryModal() {
  const modal = document.querySelector('[data-testid="product-history-modal"]') || 
                document.querySelector('.product-history-modal') ||
                document.querySelector('[class*="history"]');
  
  if (modal) {
    console.log('‚úÖ Modal de hist√≥rico encontrado:', modal);
    return true;
  } else {
    console.log('‚ùå Modal de hist√≥rico n√£o encontrado');
    return false;
  }
}

// Fun√ß√£o para verificar bot√µes de hist√≥rico
function checkHistoryButtons() {
  const buttons = document.querySelectorAll('button[title*="hist√≥rico"], button[title*="history"]');
  console.log('üîò Bot√µes de hist√≥rico encontrados:', buttons.length);
  
  buttons.forEach((btn, index) => {
    console.log(`  ${index + 1}. ${btn.title || btn.textContent}`);
  });
  
  return buttons.length > 0;
}

// ========================================
// 4. VERIFICAR HOOKS DO REACT
// ========================================

// Fun√ß√£o para verificar se os hooks est√£o funcionando
function checkReactHooks() {
  // Verificar se o React DevTools est√° dispon√≠vel
  if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
    console.log('‚úÖ React DevTools dispon√≠vel');
  } else {
    console.log('‚ö†Ô∏è React DevTools n√£o dispon√≠vel');
  }
  
  // Verificar se h√° componentes de produtos montados
  const productComponents = document.querySelectorAll('[class*="product"], [data-testid*="product"]');
  console.log('üì¶ Componentes de produto encontrados:', productComponents.length);
}

// ========================================
// 5. TESTAR FUNCIONALIDADE
// ========================================

// Fun√ß√£o para simular cria√ß√£o de hist√≥rico
function testHistoryCreation() {
  console.log('üß™ Testando cria√ß√£o de hist√≥rico...');
  
  try {
    // Simular dados de produto
    const testProduct = {
      id: 'test-id-' + Date.now(),
      code: 'TEST' + Date.now(),
      description: 'Produto de teste',
      category: 'Teste',
      created_at: new Date().toISOString()
    };
    
    // Tentar acessar o servi√ßo via window
    if (window.productHistoryService) {
      const entry = window.productHistoryService.recordProductCreated(
        testProduct,
        'test-user-id',
        'Usu√°rio Teste'
      );
      console.log('‚úÖ Hist√≥rico criado:', entry);
    } else {
      console.log('‚ùå Servi√ßo n√£o dispon√≠vel para teste');
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar cria√ß√£o:', error);
  }
}

// ========================================
// 6. VERIFICAR INTEGRA√á√ÉO COM SUPABASE
// ========================================

// Fun√ß√£o para verificar se h√° erros de API
function checkAPIErrors() {
  const errors = [];
  
  // Verificar console por erros relacionados a hist√≥rico
  const originalError = console.error;
  console.error = function(...args) {
    if (args.some(arg => String(arg).includes('history') || String(arg).includes('hist√≥rico'))) {
      errors.push(args);
    }
    originalError.apply(console, args);
  };
  
  console.log('üîç Monitorando erros de API...');
  
  // Restaurar console.error ap√≥s 5 segundos
  setTimeout(() => {
    console.error = originalError;
    if (errors.length > 0) {
      console.log('‚ùå Erros encontrados:', errors);
    } else {
      console.log('‚úÖ Nenhum erro de API detectado');
    }
  }, 5000);
}

// ========================================
// 7. EXECUTAR VERIFICA√á√ïES
// ========================================

console.log('\nüöÄ INICIANDO VERIFICA√á√ïES...\n');

// Verificar componentes
checkHistoryModal();
checkHistoryButtons();
checkReactHooks();

// Verificar API
checkAPIErrors();

// Testar funcionalidade
setTimeout(() => {
  testHistoryCreation();
}, 1000);

// ========================================
// 8. INSTRU√á√ïES PARA TESTE MANUAL
// ========================================

console.log('\nüìã INSTRU√á√ïES PARA TESTE MANUAL:');
console.log('1. V√° para a p√°gina de produtos');
console.log('2. Clique no √≠cone de hist√≥rico (üìú) em qualquer produto');
console.log('3. Verifique se o modal abre com dados');
console.log('4. Teste os filtros e busca no modal');
console.log('5. Crie, edite ou exclua um produto');
console.log('6. Verifique se o hist√≥rico √© registrado');

// ========================================
// 9. FUN√á√ïES √öTEIS PARA DEBUG
// ========================================

// Fun√ß√£o para limpar hist√≥rico local
window.clearProductHistory = function() {
  localStorage.removeItem('product_history');
  console.log('üóëÔ∏è Hist√≥rico local limpo');
};

// Fun√ß√£o para mostrar hist√≥rico local
window.showProductHistory = function() {
  const history = localStorage.getItem('product_history');
  if (history) {
    console.log('üìä Hist√≥rico local:', JSON.parse(history));
  } else {
    console.log('üì≠ Nenhum hist√≥rico local');
  }
};

// Fun√ß√£o para for√ßar atualiza√ß√£o
window.refreshProductHistory = function() {
  if (window.productHistoryService) {
    window.productHistoryService.loadFromLocalStorage();
    console.log('üîÑ Hist√≥rico recarregado');
  }
};

console.log('\nüõ†Ô∏è FUN√á√ïES DE DEBUG DISPON√çVEIS:');
console.log('- clearProductHistory(): Limpar hist√≥rico local');
console.log('- showProductHistory(): Mostrar hist√≥rico local');
console.log('- refreshProductHistory(): Recarregar hist√≥rico');

console.log('\n‚úÖ VERIFICA√á√ÉO CONCLU√çDA!');
