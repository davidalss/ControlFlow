import { QueryClient, QueryFunction } from "@tanstack/react-query";
import { supabase } from './supabaseClient';

// Fun√ß√£o para obter o token do Supabase
const getSupabaseToken = async (): Promise<string | null> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    return session?.access_token || null;
  } catch (error) {
    console.error('Erro ao obter token do Supabase:', error);
    return null;
  }
};

// Fun√ß√£o para verificar se a resposta HTTP est√° OK, se n√£o, lan√ßa um erro
async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    
    // 401 = N√£o autorizado (token inv√°lido/expirado) - redireciona para login
    if (res.status === 401) {
      console.warn(`Erro de autentica√ß√£o (401): ${text}`);
      if (typeof window !== 'undefined' && !window.location.pathname.includes('/login')) {
        console.log('Redirecionando para login devido a erro de autentica√ß√£o');
        window.location.href = '/login';
      }
    }
    
    // 403 = Acesso negado (sem permiss√£o) - n√£o redireciona, apenas mostra erro
    if (res.status === 403) {
      console.warn(`Erro de autoriza√ß√£o (403): ${text}`);
      // N√£o redireciona para login, apenas lan√ßa o erro para ser tratado pelo componente
    }
    
    throw new Error(`${res.status}: ${text}`);
  }
}

// Fun√ß√£o para fazer requisi√ß√µes √† API com autentica√ß√£o Supabase e retry
export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
  retries: number = 3
): Promise<Response> {
  // Pega o token de autentica√ß√£o do Supabase
  const token = await getSupabaseToken();
  
  // Construir URL completa
  const apiUrl = import.meta.env.VITE_API_URL || 'https://enso-backend-0aa1.onrender.com';
  const fullUrl = url.startsWith('http') ? url : `${apiUrl}${url}`;
  
  console.log(`üåê API Request: ${method} ${fullUrl} (tentativa ${4 - retries}/3)`);
  
  try {
    const res = await fetch(fullUrl, {
      method,
      headers: {
        ...(data ? { "Content-Type": "application/json" } : {}),
        // Adiciona o token do Supabase no cabe√ßalho Authorization se existir
        ...(token ? { "Authorization": `Bearer ${token}` } : {})
      },
      body: data ? JSON.stringify(data) : undefined,
      credentials: "include",
    });

    console.log(`üì° API Response: ${res.status} ${res.statusText}`);
    
    await throwIfResNotOk(res);
    return res;
  } catch (error) {
    // Se ainda h√° tentativas e o erro √© de rede, tentar novamente
    if (retries > 1 && (error instanceof TypeError || error.message.includes('fetch'))) {
      console.log(`üîÑ Tentativa falhou, tentando novamente em 1s... (${retries - 1} tentativas restantes)`);
      await new Promise(resolve => setTimeout(resolve, 1000));
      return apiRequest(method, url, data, retries - 1);
    }
    
    // Se n√£o h√° mais tentativas ou √© outro tipo de erro, lan√ßar
    throw error;
  }
}

// Define como tratar erros 401 (n√£o autorizado)
type UnauthorizedBehavior = "returnNull" | "throw";

// Fun√ß√£o para requisi√ß√µes GET do React Query com autentica√ß√£o Supabase
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    // Pega o token de autentica√ß√£o do Supabase
    const token = await getSupabaseToken();
    
    const res = await fetch(queryKey.join("/") as string, {
      credentials: "include",
      headers: {
        // Adiciona o token do Supabase se existir
        ...(token ? { "Authorization": `Bearer ${token}` } : {})
      }
    });

    // Se n√£o autorizado e comportamento √© returnNull, retorna null
    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      console.warn(`Erro de autentica√ß√£o (401) em getQueryFn`);
      // S√≥ redireciona se n√£o estiver j√° na p√°gina de login
      if (typeof window !== 'undefined' && !window.location.pathname.includes('/login')) {
        console.log('Redirecionando para login devido a erro de autentica√ß√£o em getQueryFn');
        window.location.href = '/login';
      }
      return null;
    }
    
    // 403 = Acesso negado (sem permiss√£o) - n√£o redireciona, apenas retorna null
    if (unauthorizedBehavior === "returnNull" && res.status === 403) {
      console.warn(`Erro de autoriza√ß√£o (403) em getQueryFn - sem permiss√£o para acessar este recurso`);
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

// Configura√ß√£o do cliente React Query para gerenciar estado do servidor
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: (failureCount, error) => {
        // N√£o tentar novamente para erros de autentica√ß√£o
        if (error instanceof Error && error.message.includes('401')) {
          return false;
        }
        // Tentar at√© 3 vezes para outros erros
        return failureCount < 3;
      },
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // 5 minutos
      gcTime: 10 * 60 * 1000, // 10 minutos (anteriormente cacheTime)
    },
  },
});
