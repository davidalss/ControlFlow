import 'dotenv/config';
import { readFileSync } from 'fs';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';
import { storage } from './server/storage';
import { Product } from './shared/schema';

// Mapping for Business Units
const businessUnitMapping: { [key: string]: 'DIY' | 'TECH' | '' | 'KITCHEN_BEAUTY' | 'MOTOR_COMFORT' } = {
  "SDA - COOKING & BEAUTY": "KITCHEN_BEAUTY",
  "SDA - MOTORS & COMFORT": "MOTOR_COMFORT",
  "DIY": "DIY",
  "TECH": "TECH",
  "SEM CLASSIFICAÇÃO": "DIY", // Default fallback
  "": "DIY", // Default fallback for empty BU
};

// Mapping for Categories
const categoryMapping: { [key: string]: string } = {
  "ventilador - de teto": "Ar e Climatização",
  "ventilador - de coluna": "Ar e Climatização",
  "ventilador - de mesa": "Ar e Climatização",
  "aquecedores": "Ar e Climatização",
  "umidificador/ar condicionado": "Ar e Climatização",
  "cozinha": "Cozinha",
  "aspirador - robo": "Robô Aspirador",
  "lavadora - intensivo": "Limpeza",
  "lavadora - semi intensivo": "Limpeza",
  "lavadora - ocasional": "Limpeza",
  "extratora - portátil": "Limpeza",
  "extratora - barril": "Limpeza",
  "extratora - sem fio": "Limpeza",
  "aspirador - vertical": "Limpeza",
  "aspirador - automotivo": "Limpeza",
  "aspirador - portátil": "Limpeza",
  "aspirador - barril": "Limpeza",
  "soluções de limpeza": "Limpeza",
  "ferramentas": "Ferramentas",
  "ferramentas manuais": "Ferramentas",
  "ferramenta - pintura/soprador": "Ferramentas",
  "ferramenta - serra/lixa/desbas": "Ferramentas",
  "ferramenta - paraf/furad/mart": "Ferramentas",
  "ferramenta - solda": "Ferramentas",
  "jardinagem elétrica": "Jardinagem",
  "garden manual - pulverização": "Jardinagem",
  "garden manual - irrigação": "Jardinagem",
  "speaker": "Áudio e Vídeo",
  "headphone": "Áudio e Vídeo",
  "earphone": "Áudio e Vídeo",
  "câmeras": "Áudio e Vídeo", // Assuming not IoT for now
  "polidoras": "Eletroportáteis", // General Eletroportáteis
  "produtos revendidos": "Outros", // Catch-all for unknown
};

export async function importProducts() {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);
  const filePath = resolve(__dirname, 'dados.csv'); // Assuming dados.csv is in the root
  const fileContent = readFileSync(filePath, 'utf-8');
  const lines = fileContent.split('\n');

  const productsToImport: Product[] = [];
  const uniqueProductCodes = new Set<string>();

  // Skip header row
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;

    const columns = line.split(';');

    // Ensure we have enough columns
    if (columns.length < 17) {
      console.warn(`Skipping malformed line: ${line}`);
      continue;
    }

    const code = columns[1].trim(); // cd_item
    const description = columns[4].trim(); // ds_item
    const ean = columns[8].trim(); // cd_ean
    const familiaComercial = columns[16].trim(); // Familia_Comercial
    const rawCategory = familiaComercial; // Get the raw category from Familia_Comercial
    const category = categoryMapping[rawCategory] || rawCategory; // Apply mapping, or use raw if no mapping
    const buRaw = columns[15].trim(); // BU
    const dsVoltagem = columns[5].trim(); // ds_voltagem
    const familiaGrupos = columns[6].trim(); // Família (grupos)
    const pesoBruto = columns[11].trim(); // peso_bruto
    const tipoExclusividade = columns[13].trim(); // tipo_exclusividade
    const origem = columns[14].trim(); // Origem

    // Skip if product code is empty or already processed
    if (!code || uniqueProductCodes.has(code)) {
      continue;
    }

    uniqueProductCodes.add(code);

    const businessUnit = businessUnitMapping[buRaw] || "DIY";

    const technicalParameters: { [key: string]: any } = {};
    if (dsVoltagem) technicalParameters.voltagem = dsVoltagem;
    if (familiaGrupos) technicalParameters.familia_grupos = familiaGrupos;
    if (pesoBruto) technicalParameters.peso_bruto = pesoBruto;
    if (tipoExclusividade) technicalParameters.tipo_exclusividade = tipoExclusividade;
    if (origem) technicalParameters.origem = origem;
    if (familiaComercial) technicalParameters.familia_comercial = familiaComercial;

    productsToImport.push({
      id: "", // Will be generated by the database
      code,
      description,
      ean,
      category,
      businessUnit,
      technicalParameters: Object.keys(technicalParameters).length > 0 ? technicalParameters : null,
      createdAt: new Date(), // Will be generated by the database
    });
  }

  console.log(`Found ${productsToImport.length} unique products to import.`);

  for (const product of productsToImport) {
    try {
      const existingProduct = await storage.getProductByCode(product.code);
      if (existingProduct) {
        // Update existing product
        const { id, createdAt, ...productData } = product;
        await storage.updateProduct(existingProduct.id, productData as any);
        console.log(`Updated product: ${product.code}`);
      } else {
        // Create new product
        const { id, createdAt, ...productData } = product;
        await storage.createProduct(productData as any);
        console.log(`Imported product: ${product.code}`);
      }
    } catch (error: any) {
      console.error(`Error processing product ${product.code}:`, error);
    }
  }

  console.log("Product import process finished.");
}


