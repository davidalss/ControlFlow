import { Router } from 'express';
import { chatService } from '../services/chatService';
import { authenticateSupabaseToken } from '../middleware/supabaseAuth';

const router = Router();



/**
 * GET /api/chat/sessions
 * Obter todas as sess√µes do usu√°rio
 */
router.get('/sessions', async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
    }

    const sessions = await chatService.getUserSessions(userId);
    res.json({ success: true, data: sessions });
  } catch (error) {
    console.error('Erro ao obter sess√µes:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * GET /api/chat/sessions/:sessionId/messages
 * Obter mensagens de uma sess√£o espec√≠fica
 */
router.get('/sessions/:sessionId/messages', async (req, res) => {
  try {
    const { sessionId } = req.params;
    const { limit = 50 } = req.query;

    console.log('üîç Tentando obter mensagens para sess√£o:', sessionId);
    
    // Verificar se a sess√£o existe primeiro
    const session = await chatService.getSessionById(sessionId);
    if (!session) {
      console.log('‚ùå Sess√£o n√£o encontrada:', sessionId);
      return res.status(404).json({ error: 'Sess√£o n√£o encontrada' });
    }

    console.log('‚úÖ Sess√£o encontrada, buscando mensagens...');
    const messages = await chatService.getSessionMessages(sessionId, Number(limit));
    console.log('üì® Mensagens encontradas:', messages.length);
    
    res.json({ success: true, data: messages });
  } catch (error) {
    console.error('‚ùå Erro ao obter mensagens:', error);
    res.status(500).json({ error: 'Erro interno do servidor', details: error.message });
  }
});

/**
 * GET /api/chat/sessions/:sessionId/contexts
 * Obter contextos de uma sess√£o espec√≠fica
 */
router.get('/sessions/:sessionId/contexts', async (req, res) => {
  try {
    const { sessionId } = req.params;

    const contexts = await chatService.getSessionContexts(sessionId);
    res.json({ success: true, data: contexts });
  } catch (error) {
    console.error('Erro ao obter contextos:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * POST /api/chat/sessions
 * Criar nova sess√£o ou obter sess√£o ativa
 */
router.post('/sessions', async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
    }

    const { sessionName } = req.body;
    const session = await chatService.getOrCreateSession(userId, sessionName);
    
    res.json({ success: true, data: session });
  } catch (error) {
    console.error('Erro ao criar/obter sess√£o:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * POST /api/chat/sessions/:sessionId/archive
 * Arquivar uma sess√£o
 */
router.post('/sessions/:sessionId/archive', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    await chatService.archiveSession(sessionId);
    res.json({ success: true, message: 'Sess√£o arquivada com sucesso' });
  } catch (error) {
    console.error('Erro ao arquivar sess√£o:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * GET /api/chat/sessions/:sessionId/label-analysis
 * Obter contexto de an√°lise de etiquetas
 */
router.get('/sessions/:sessionId/label-analysis', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    const contexts = await chatService.getLabelAnalysisContext(sessionId);
    res.json({ success: true, data: contexts });
  } catch (error) {
    console.error('Erro ao obter contexto de an√°lise:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

/**
 * GET /api/chat/sessions/:sessionId/comparison
 * Obter contexto de compara√ß√µes
 */
router.get('/sessions/:sessionId/comparison', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    const contexts = await chatService.getComparisonContext(sessionId);
    res.json({ success: true, data: contexts });
  } catch (error) {
    console.error('Erro ao obter contexto de compara√ß√£o:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

export default router;
