import axios from 'axios';

// Tipos para o OpenRouter API
interface OpenRouterMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface OpenRouterRequest {
  model: string;
  messages: OpenRouterMessage[];
  temperature?: number;
  max_tokens?: number;
  top_p?: number;
  frequency_penalty?: number;
  presence_penalty?: number;
}

interface OpenRouterResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

// Configura√ß√£o da API - APENAS vari√°veis de ambiente
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || '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';
const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';

if (!OPENROUTER_API_KEY) {
  console.warn('‚ö†Ô∏è OPENROUTER_API_KEY n√£o configurada. Severino funcionar√° apenas em modo offline.');
}

// Rate Limiter Global para API OpenRouter (limites generosos)
class OpenRouterRateLimiter {
  private requestTimes: number[] = [];
  private readonly MAX_REQUESTS_PER_MINUTE = 100; // Limite muito generoso
  private readonly WINDOW_SIZE = 60 * 1000; // 1 minuto em ms

  async waitForSlot(): Promise<void> {
    const now = Date.now();
    
    // Remover requisi√ß√µes antigas (mais de 1 minuto)
    this.requestTimes = this.requestTimes.filter(time => now - time < this.WINDOW_SIZE);
    
    // Se j√° atingiu o limite, aguardar
    if (this.requestTimes.length >= this.MAX_REQUESTS_PER_MINUTE) {
      const oldestRequest = this.requestTimes[0];
      const waitTime = this.WINDOW_SIZE - (now - oldestRequest) + 1000; // +1s de margem
      
      console.log(`üîÑ Rate limit global atingido. Aguardando ${Math.ceil(waitTime/1000)}s...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      
      // Recursivamente verificar novamente ap√≥s aguardar
      return this.waitForSlot();
    }
    
    // Adicionar timestamp da requisi√ß√£o atual
    this.requestTimes.push(now);
    console.log(`üìä Requisi√ß√µes na janela: ${this.requestTimes.length}/${this.MAX_REQUESTS_PER_MINUTE}`);
  }

  getRemainingRequests(): number {
    const now = Date.now();
    this.requestTimes = this.requestTimes.filter(time => now - time < this.WINDOW_SIZE);
    return Math.max(0, this.MAX_REQUESTS_PER_MINUTE - this.requestTimes.length);
  }
}

// Contexto de conversa
interface ConversationContext {
  messages: Array<{
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
  }>;
  currentPage?: string;
  userPreferences?: {
    language: string;
    detailLevel: 'basic' | 'detailed' | 'expert';
    proactiveHelp: boolean;
  };
  lastApiCall?: number;
  rateLimitCount?: number;
}

// Cache LRU implementa√ß√£o
class LRUCache<K, V> {
  private capacity: number;
  private cache: Map<K, V & { timestamp: number }>;

  constructor(capacity: number) {
    this.capacity = capacity;
    this.cache = new Map();
  }

  get(key: K): V | undefined {
    const item = this.cache.get(key);
    if (item) {
      // Atualizar timestamp para "recentemente usado"
      this.cache.delete(key);
      this.cache.set(key, { ...item, timestamp: Date.now() });
      return item;
    }
    return undefined;
  }

  set(key: K, value: V): void {
    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.cache.size >= this.capacity) {
      // Remover item menos recentemente usado
      const firstKey = this.cache.keys().next().value;
      if (firstKey !== undefined) {
        this.cache.delete(firstKey);
      }
    }
    this.cache.set(key, { ...value, timestamp: Date.now() });
  }

  clear(): void {
    this.cache.clear();
  }

  size(): number {
    return this.cache.size;
  }
}

class OpenRouterService {
  private conversationContext: Map<string, ConversationContext> = new Map();
  private qualityKnowledgeBase: Map<string, string> = new Map();
  private responseCache: LRUCache<string, { response: string; timestamp: number }>;
  private rateLimiter: OpenRouterRateLimiter;
  private readonly CACHE_DURATION = 15 * 60 * 1000; // 15 minutos
  private readonly RATE_LIMIT_DELAY = 1000; // 1 segundo entre chamadas por usu√°rio
  private readonly MAX_RETRIES = 3;
  private readonly API_TIMEOUT = 15000; // 15 segundos de timeout
  private readonly MAX_MESSAGES_HISTORY = 20; // Aumentado para 20 mensagens
  private readonly CACHE_SIZE = 200; // Cache maior

  constructor() {
    this.responseCache = new LRUCache(this.CACHE_SIZE);
    this.rateLimiter = new OpenRouterRateLimiter();
    this.initializeQualityKnowledge();
  }

  private initializeQualityKnowledge() {
    // Base de conhecimento especializada em qualidade
    this.qualityKnowledgeBase.set('aql', `
      AQL (Acceptable Quality Level) √© um padr√£o de inspe√ß√£o por amostragem:
      - AQL 0.065: Para produtos cr√≠ticos (defeitos cr√≠ticos)
      - AQL 1.0: Para produtos importantes (defeitos maiores)
      - AQL 2.5: Para produtos gerais (defeitos menores)
      
      C√°lculo do tamanho da amostra baseado no tamanho do lote e n√≠vel de inspe√ß√£o.
    `);

    this.qualityKnowledgeBase.set('inspection', `
      Tipos de inspe√ß√£o:
      - Inspe√ß√£o 100%: Todos os itens s√£o verificados
      - Inspe√ß√£o por amostragem: Baseada em planos estat√≠sticos
      - Inspe√ß√£o de recebimento: Para materiais recebidos
      - Inspe√ß√£o de processo: Durante a produ√ß√£o
      - Inspe√ß√£o final: Antes do envio
    `);

    this.qualityKnowledgeBase.set('defects', `
      Classifica√ß√£o de defeitos:
      - Cr√≠tico: Pode causar les√£o ou falha total
      - Maior: Afeta funcionalidade ou apar√™ncia significativamente
      - Menor: Pequenos problemas est√©ticos ou funcionais
    `);

    this.qualityKnowledgeBase.set('training', `
      Treinamentos de qualidade:
      - Procedimentos de inspe√ß√£o
      - Uso de instrumentos de medi√ß√£o
      - Interpreta√ß√£o de especifica√ß√µes
      - Gest√£o de n√£o conformidades
      - Metodologias de melhoria cont√≠nua
    `);

    this.qualityKnowledgeBase.set('quality_engineering', `
      Engenharia de Qualidade:
      - An√°lise estat√≠stica de processos
      - Controle estat√≠stico de qualidade
      - Metodologias Six Sigma
      - Ferramentas de melhoria cont√≠nua
      - Gest√£o de riscos de qualidade
    `);
  }

  // Valida√ß√£o de entrada do usu√°rio
  private validateUserInput(input: string): { isValid: boolean; error?: string } {
    if (!input || typeof input !== 'string') {
      return { isValid: false, error: 'Entrada inv√°lida' };
    }

    if (input.length > 2000) {
      return { isValid: false, error: 'Mensagem muito longa (m√°ximo 2000 caracteres)' };
    }

    // Verificar caracteres perigosos ou prompts que podem quebrar a API
    const dangerousPatterns = [
      /```/g, // Code blocks n√£o fechados
      /<script>/gi,
      /javascript:/gi,
      /data:text\/html/gi
    ];

    for (const pattern of dangerousPatterns) {
      if (pattern.test(input)) {
        return { isValid: false, error: 'Conte√∫do n√£o permitido' };
      }
    }

    return { isValid: true };
  }

  async generateResponse(
    userInput: string,
    userId: string,
    context?: {
      currentPage?: string;
      pageData?: any;
      userRole?: string;
    }
  ): Promise<string> {
    try {
      // Validar entrada do usu√°rio
      const validation = this.validateUserInput(userInput);
      if (!validation.isValid) {
        return `‚ùå ${validation.error}. Por favor, reformule sua pergunta.`;
      }

      // Obter ou criar contexto de conversa
      let conversation = this.conversationContext.get(userId);
      if (!conversation) {
        conversation = {
          messages: [],
          currentPage: context?.currentPage,
          userPreferences: {
            language: 'pt-BR',
            detailLevel: 'detailed',
            proactiveHelp: true
          },
          lastApiCall: 0,
          rateLimitCount: 0
        };
        this.conversationContext.set(userId, conversation);
      }

      // Atualizar contexto atual
      if (context?.currentPage) {
        conversation.currentPage = context.currentPage;
      }

      // Verificar cache primeiro
      const cacheKey = `${userInput.toLowerCase().trim()}_${conversation.currentPage || 'general'}`;
      const cachedResponse = this.responseCache.get(cacheKey);
      
      if (cachedResponse && (Date.now() - cachedResponse.timestamp) < this.CACHE_DURATION) {
        console.log('‚úÖ Resposta retornada do cache');
        return cachedResponse.response;
      }

      // Rate limiting por usu√°rio
      const timeSinceLastCall = Date.now() - (conversation.lastApiCall || 0);
      if (timeSinceLastCall < this.RATE_LIMIT_DELAY) {
        const waitTime = this.RATE_LIMIT_DELAY - timeSinceLastCall;
        console.log(`‚è≥ Rate limit por usu√°rio. Aguardando ${waitTime}ms...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }

      // Verificar se API key est√° dispon√≠vel
      if (!OPENROUTER_API_KEY) {
        return this.getFallbackResponse(userInput, context);
      }

      // Rate limiting global para API OpenRouter (m√°ximo 2 requisi√ß√µes por minuto)
      console.log(`üìä Requisi√ß√µes restantes: ${this.rateLimiter.getRemainingRequests()}`);
      await this.rateLimiter.waitForSlot();

      // Construir prompt especializado
      const messages = this.buildSpecializedPrompt(userInput, conversation, context);

      // Preparar requisi√ß√£o para OpenRouter
      const request: OpenRouterRequest = {
        model: "deepseek/deepseek-r1:free", // Modelo gratuito OpenRouter
        messages: messages,
        temperature: 0.7,
        max_tokens: 4000, // Limite padr√£o
        top_p: 0.95,
        frequency_penalty: 0.2,
        presence_penalty: 0.2
      };

      // Fazer chamada para API com retry e rate limiting melhorado
      let response;
      let retryCount = 0;

      while (retryCount < this.MAX_RETRIES) {
        try {
          response = await axios.post(
            OPENROUTER_API_URL,
            request,
            {
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                'User-Agent': 'ControlFlow/1.0'
              },
              timeout: this.API_TIMEOUT // Timeout aumentado para 15s
            }
          );
          break; // Sucesso, sair do loop
        } catch (error: any) {
          retryCount++;
          console.error(`‚ùå Tentativa ${retryCount} falhou:`, error.response?.status, error.message);
          
          // Tratamento espec√≠fico por tipo de erro
          if (error.response?.status === 429) {
            // Verificar se h√° retryDelay na resposta da API
            const retryDelay = error.response?.data?.error?.details?.find(
              (detail: any) => detail['@type'] === 'type.googleapis.com/google.rpc.RetryInfo'
            )?.retryDelay;
            
            if (retryDelay) {
              const waitTime = parseInt(retryDelay.replace('s', '')) * 1000;
              console.log(`üîÑ Rate limit atingido. Aguardando ${waitTime}ms conforme solicitado pela API...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            } else {
              // Fallback para exponential backoff se n√£o houver retryDelay
              const waitTime = Math.min(Math.pow(2, retryCount) * 1000, 5000);
              console.log(`üîÑ Rate limit atingido. Aguardando ${waitTime}ms antes da pr√≥xima tentativa...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            }
            
            // Se for a √∫ltima tentativa, usar modo offline
            if (retryCount >= this.MAX_RETRIES) {
              console.log('üîÑ M√°ximo de tentativas atingido. Usando modo offline...');
              return this.getFallbackResponse(userInput, context);
            }
          } else if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
            console.log('üåê Erro de rede. Usando modo offline...');
            return this.getFallbackResponse(userInput, context);
          } else if (error.code === 'ETIMEDOUT') {
            console.log('‚è∞ Timeout da API. Usando modo offline...');
            return this.getFallbackResponse(userInput, context);
          } else if (retryCount >= this.MAX_RETRIES) {
            throw error; // Re-throw se esgotou as tentativas
          } else {
            // Para outros erros, aguardar um pouco antes de tentar novamente
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      }

      if (!response) {
        throw new Error('Falha em todas as tentativas de conex√£o com OpenRouter API');
      }

      // Validar estrutura da resposta antes de acessar
      const openRouterResponse: OpenRouterResponse = response.data;
      if (!openRouterResponse?.choices?.[0]?.message?.content) {
        console.warn('‚ö†Ô∏è Resposta da API com estrutura inv√°lida');
        return this.getFallbackResponse(userInput, context);
      }

      const assistantResponse = openRouterResponse.choices[0].message.content;

      // Atualizar timestamp da √∫ltima chamada por usu√°rio
      conversation.lastApiCall = Date.now();

      // Armazenar no cache
      this.responseCache.set(cacheKey, {
        response: assistantResponse,
        timestamp: Date.now()
      });

      // Atualizar hist√≥rico de conversa
      conversation.messages.push(
        { role: 'user', content: userInput, timestamp: new Date() },
        { role: 'assistant', content: assistantResponse, timestamp: new Date() }
      );

      // Manter apenas as √∫ltimas mensagens para evitar contexto muito longo
      if (conversation.messages.length > this.MAX_MESSAGES_HISTORY) {
        conversation.messages = conversation.messages.slice(-this.MAX_MESSAGES_HISTORY);
      }

      return assistantResponse;

    } catch (error: any) {
      console.error('‚ùå Erro na integra√ß√£o com OpenRouter:', error.response?.status, error.message);
      
      // Se for erro 429, 403, 401 ou qualquer erro de API, usar modo offline
      if (error.response?.status === 429 || error.response?.status === 403 || error.response?.status === 401) {
        return 'üîÑ Estou recebendo muitas solicita√ß√µes no momento. Funcionando em modo offline para te ajudar! üòä';
      }
      
      return this.getFallbackResponse(userInput, context);
    }
  }

  private buildSpecializedPrompt(
    userInput: string,
    conversation: ConversationContext,
    context?: any
  ): OpenRouterMessage[] {
    const pageContext = this.getPageContext(conversation.currentPage);
    const qualityKnowledge = this.getRelevantQualityKnowledge(userInput);
    
    const systemPrompt = `Voc√™ √© o Severino, um assistente virtual especializado em qualidade industrial e gest√£o de processos. Voc√™ trabalha no sistema ControlFlow e ajuda inspetores e gestores de qualidade.

CONTEXTO ATUAL:
- P√°gina: ${conversation.currentPage || 'N√£o especificada'}
- Contexto da p√°gina: ${pageContext}

CONHECIMENTO ESPECIALIZADO EM QUALIDADE:
${qualityKnowledge}

INSTRU√á√ïES:
1. Responda sempre em portugu√™s brasileiro
2. Seja espec√≠fico e pr√°tico
3. Ofere√ßa sugest√µes baseadas no contexto atual
4. Use linguagem t√©cnica apropriada para qualidade
5. Se n√£o souber algo, sugira onde encontrar a informa√ß√£o
6. Seja proativo em oferecer ajuda adicional
7. Mantenha respostas concisas mas informativas`;

    const messages: OpenRouterMessage[] = [
      { role: 'system', content: systemPrompt }
    ];

    // Adicionar hist√≥rico da conversa (√∫ltimas 5 mensagens)
    const recentMessages = conversation.messages.slice(-5);
    for (const msg of recentMessages) {
      messages.push({
        role: msg.role,
        content: msg.content
      });
    }

    // Adicionar a pergunta atual do usu√°rio
    messages.push({
      role: 'user',
      content: userInput
    });

    return messages;
  }

  private getPageContext(page?: string): string {
    const pageContexts: Record<string, string> = {
      '/inspections': 'P√°gina de inspe√ß√µes - aqui voc√™ pode criar, visualizar e gerenciar inspe√ß√µes de qualidade',
      '/products': 'P√°gina de produtos - cadastro e gest√£o de produtos para inspe√ß√£o',
      '/dashboard': 'Dashboard principal - visualiza√ß√£o de m√©tricas e indicadores de qualidade',
      '/training': 'P√°gina de treinamentos - gest√£o de treinamentos e certifica√ß√µes',
      '/quality': 'M√≥dulo de engenharia de qualidade - ferramentas avan√ßadas de an√°lise',
      '/reports': 'Relat√≥rios e an√°lises - gera√ß√£o de relat√≥rios de qualidade'
    };

    return pageContexts[page || ''] || 'P√°gina geral do sistema';
  }

  private getRelevantQualityKnowledge(userInput: string): string {
    const input = userInput.toLowerCase();
    let knowledge = '';

    if (input.includes('aql') || input.includes('amostra')) {
      knowledge += this.qualityKnowledgeBase.get('aql') + '\n';
    }
    if (input.includes('inspe√ß√£o') || input.includes('inspecao')) {
      knowledge += this.qualityKnowledgeBase.get('inspection') + '\n';
    }
    if (input.includes('defeito') || input.includes('n√£o conformidade')) {
      knowledge += this.qualityKnowledgeBase.get('defects') + '\n';
    }
    if (input.includes('treinamento') || input.includes('certifica√ß√£o')) {
      knowledge += this.qualityKnowledgeBase.get('training') + '\n';
    }
    if (input.includes('engenharia') || input.includes('qualidade')) {
      knowledge += this.qualityKnowledgeBase.get('quality_engineering') + '\n';
    }

    return knowledge || 'Conhecimento geral em qualidade industrial e gest√£o de processos.';
  }

  private formatConversationHistory(messages: Array<{role: string, content: string}>): string {
    if (messages.length === 0) return 'Nenhuma conversa anterior';
    
    return messages
      .slice(-5) // √öltimas 5 mensagens para contexto mais rico
      .map(msg => `${msg.role}: ${msg.content}`)
      .join('\n');
  }

  private getFallbackResponse(userInput: string, context?: any): string {
    const input = userInput.toLowerCase();
    
    // Respostas mais concisas e inteligentes
    if (input.includes('ajuda') || input.includes('help') || input.includes('oi') || input.includes('ol√°')) {
      return `Ol√°! Sou o Severino, seu assistente de qualidade! üòä

**Posso ajudar com:**
‚Ä¢ Inspe√ß√µes e AQL ‚Ä¢ C√°lculos de amostragem ‚Ä¢ Procedimentos de qualidade
‚Ä¢ Gest√£o de n√£o conformidades ‚Ä¢ Treinamentos ‚Ä¢ Relat√≥rios

**Exemplos:** "Como funciona o AQL?", "Quero criar uma inspe√ß√£o", "Explique defeitos cr√≠ticos"

Como posso ajud√°-lo hoje?`;
    }
    
    if (input.includes('aql') || input.includes('amostra') || input.includes('tamanho')) {
      return `üìä **AQL e Amostragem**

**AQL (Acceptable Quality Level):**
‚Ä¢ 0.065%: Defeitos cr√≠ticos (seguran√ßa)
‚Ä¢ 1.0%: Defeitos maiores (funcionalidade)  
‚Ä¢ 2.5%: Defeitos menores (apar√™ncia)

**Para calcular amostra preciso:**
‚Ä¢ Tamanho do lote ‚Ä¢ Tipo de defeito ‚Ä¢ N√≠vel de inspe√ß√£o (I/II/III)

**Exemplo:** 1000 pe√ßas, defeitos menores (AQL 2.5%), n√≠vel II = 80 pe√ßas

Me diga os dados do seu lote! üòä`;
    }
    
    if (input.includes('inspe√ß√£o') || input.includes('inspecao') || input.includes('criar')) {
      return `üîç **Criar Inspe√ß√£o**

**Etapas:**
1. **Produto:** Escolha na p√°gina "Produtos" ou me diga qual
2. **Tipo:** Recebimento / Processo / Final
3. **Crit√©rios:** AQL, par√¢metros, pontos de inspe√ß√£o

**Qual produto quer inspecionar?** Me diga o nome/c√≥digo! üòä`;
    }
    
    if (input.includes('defeito') || input.includes('n√£o conformidade') || input.includes('problema')) {
      return `‚ö†Ô∏è **Gest√£o de N√£o Conformidades**

**Classifica√ß√£o:**
‚Ä¢ Cr√≠tico: Afeta seguran√ßa/performance
‚Ä¢ Maior: Afeta funcionalidade  
‚Ä¢ Menor: Afeta apar√™ncia

**A√ß√µes:** Documentar ‚Üí Classificar ‚Üí Isolar ‚Üí Corrigir

**Precisa ajuda com algum defeito espec√≠fico?**`;
    }
    
    if (input.includes('treinamento') || input.includes('certifica√ß√£o') || input.includes('curso')) {
      return `üéì **Treinamentos Dispon√≠veis**

‚Ä¢ Inspe√ß√£o de Qualidade B√°sica
‚Ä¢ Metodologia AQL
‚Ä¢ Gest√£o de N√£o Conformidades
‚Ä¢ Uso do Sistema ControlFlow
‚Ä¢ Normas de Qualidade

**Funcionalidades:** Matr√≠cula online, progresso, certificados digitais

**Gostaria de se matricular?**`;
    }
    
    if (input.includes('relat√≥rio') || input.includes('relatorio') || input.includes('dados')) {
      return `üìà **Relat√≥rios Dispon√≠veis**

‚Ä¢ Inspe√ß√µes por Per√≠odo
‚Ä¢ Tend√™ncias de Qualidade
‚Ä¢ N√£o Conformidades
‚Ä¢ Estat√≠sticas de Produtos
‚Ä¢ Treinamentos

**Funcionalidades:** Filtros, gr√°ficos, exporta√ß√£o PDF/Excel

**Dica:** Acesse "Relat√≥rios" no menu lateral!`;
    }
    
    // Navega√ß√£o do sistema - mais concisa
    if (input.includes('levar') || input.includes('ir para') || input.includes('p√°gina') || input.includes('pagina')) {
      if (input.includes('inspe√ß√£o') || input.includes('inspecao')) {
        return `üîç **Navegando para Inspe√ß√µes**

**A√ß√£o:** Navegando para /inspections

Clique em "Inspe√ß√µes" no menu lateral! üòä

**Dica:** Diga "criar inspe√ß√£o" para ajuda no processo!`;
      }
      
      if (input.includes('produto') || input.includes('produtos')) {
        return `üì¶ **Navegando para Produtos**

**A√ß√£o:** Navegando para /products

Clique em "Produtos" no menu lateral! üòä`;
      }
      
      if (input.includes('dashboard') || input.includes('in√≠cio') || input.includes('inicio')) {
        return `üè† **Navegando para Dashboard**

**A√ß√£o:** Navegando para /dashboard

Clique em "Dashboard" no menu lateral! üòä`;
      }
      
      if (input.includes('treinamento') || input.includes('treinamentos')) {
        return `üéì **Navegando para Treinamentos**

**A√ß√£o:** Navegando para /training

Clique em "Treinamentos" no menu lateral! üòä`;
      }
      
      if (input.includes('relat√≥rio') || input.includes('relatorio')) {
        return `üìä **Navegando para Relat√≥rios**

**A√ß√£o:** Navegando para /reports

Clique em "Relat√≥rios" no menu lateral! üòä`;
      }
    }
    
    // Resposta geral mais concisa
    return `Ol√°! Funcionando em modo offline. üòä

**Posso ajudar com:** Inspe√ß√µes, AQL, defeitos, treinamentos, relat√≥rios

**Exemplos:** "Como funciona AQL?", "Criar inspe√ß√£o", "Defeitos cr√≠ticos"

**Navega√ß√£o:** "Me leve para inspe√ß√µes", "Ver produtos"

Me fa√ßa uma pergunta! üöÄ`;
  }

  // M√©todos para gerenciamento de contexto
  updateUserPreferences(userId: string, preferences: Partial<ConversationContext['userPreferences']>) {
    const conversation = this.conversationContext.get(userId);
    if (conversation && conversation.userPreferences && preferences) {
      conversation.userPreferences = { 
        language: preferences.language || conversation.userPreferences.language,
        detailLevel: preferences.detailLevel || conversation.userPreferences.detailLevel,
        proactiveHelp: preferences.proactiveHelp !== undefined ? preferences.proactiveHelp : conversation.userPreferences.proactiveHelp
      };
    }
  }

  getConversationContext(userId: string): ConversationContext | undefined {
    return this.conversationContext.get(userId);
  }

  clearConversationContext(userId: string) {
    this.conversationContext.delete(userId);
  }

  // M√©todo para an√°lise de sentimento e proatividade melhorado
  async analyzeUserIntent(userInput: string): Promise<{
    intent: 'question' | 'command' | 'complaint' | 'praise' | 'help' | 'navigation';
    confidence: number;
    suggestedActions: string[];
  }> {
    const input = userInput.toLowerCase();
    
    // Navega√ß√£o
    if (input.includes('levar') || input.includes('ir para') || input.includes('p√°gina') || input.includes('pagina')) {
      return {
        intent: 'navigation',
        confidence: 0.95,
        suggestedActions: ['navigate_to_page', 'show_menu_options']
      };
    }
    
    // Perguntas
    if (input.includes('como') || input.includes('o que') || input.includes('quando') || input.includes('onde') || input.includes('qual')) {
      return {
        intent: 'question',
        confidence: 0.9,
        suggestedActions: ['provide_information', 'show_examples']
      };
    }
    
    // Comandos
    if (input.includes('crie') || input.includes('fa√ßa') || input.includes('execute') || input.includes('criar')) {
      return {
        intent: 'command',
        confidence: 0.8,
        suggestedActions: ['create_inspection', 'generate_report', 'schedule_task']
      };
    }
    
    // Reclama√ß√µes
    if (input.includes('problema') || input.includes('erro') || input.includes('n√£o funciona') || input.includes('bug')) {
      return {
        intent: 'complaint',
        confidence: 0.7,
        suggestedActions: ['troubleshoot', 'escalate', 'provide_alternative']
      };
    }
    
    // Elogios
    if (input.includes('obrigado') || input.includes('bom') || input.includes('excelente') || input.includes('√≥timo')) {
      return {
        intent: 'praise',
        confidence: 0.8,
        suggestedActions: ['acknowledge', 'suggest_improvements']
      };
    }
    
    return {
      intent: 'help',
      confidence: 0.6,
      suggestedActions: ['provide_help', 'ask_clarification']
    };
  }

  // M√©todo para obter sugest√µes proativas baseadas no contexto
  getProactiveSuggestions(userId: string, currentPage?: string): string[] {
    const conversation = this.conversationContext.get(userId);
    const suggestions: string[] = [];

    // Sugest√µes baseadas na p√°gina atual
    switch (currentPage) {
      case '/inspections':
        suggestions.push('Criar nova inspe√ß√£o', 'Ver inspe√ß√µes pendentes', 'Analisar resultados');
        break;
      case '/products':
        suggestions.push('Cadastrar produto', 'Editar especifica√ß√µes', 'Ver hist√≥rico');
        break;
      case '/dashboard':
        suggestions.push('Ver m√©tricas', 'Gerar relat√≥rio', 'Analisar tend√™ncias');
        break;
      case '/training':
        suggestions.push('Ver cursos dispon√≠veis', 'Matricular-se', 'Baixar certificado');
        break;
      default:
        suggestions.push('Como funciona o AQL?', 'Criar inspe√ß√£o', 'Ver relat√≥rios');
    }

    // Sugest√µes baseadas no hist√≥rico
    if (conversation && conversation.messages.length > 0) {
      const lastMessage = conversation.messages[conversation.messages.length - 1].content.toLowerCase();
      
      if (lastMessage.includes('aql')) {
        suggestions.push('Calcular tamanho da amostra', 'Explicar n√≠veis de inspe√ß√£o');
      } else if (lastMessage.includes('defeito')) {
        suggestions.push('Classificar defeito', 'Criar a√ß√£o corretiva');
      } else if (lastMessage.includes('inspe√ß√£o')) {
        suggestions.push('Configurar crit√©rios', 'Definir pontos de inspe√ß√£o');
      }
    }

    return suggestions.slice(0, 3); // M√°ximo 3 sugest√µes
  }
}

// Inst√¢ncia singleton
const geminiService = new OpenRouterService();
export default geminiService;
