import axios from 'axios';
import imageAnalysisService from './imageAnalysisService';
import { chatService } from './chatService';

// Tipos para o OpenRouter API
interface OpenRouterMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

interface OpenRouterRequest {
  model: string;
  messages: OpenRouterMessage[];
  temperature?: number;
  max_tokens?: number;
  top_p?: number;
  frequency_penalty?: number;
  presence_penalty?: number;
}

// Interface para gera√ß√£o de imagens
interface ImageGenerationRequest {
  prompt: string;
  model?: string;
  size?: string;
  quality?: string;
  style?: string;
}

interface ImageGenerationResponse {
  url: string;
  alt_text?: string;
  caption?: string;
}

interface OpenRouterResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

// Configura√ß√£o da API - APENAS vari√°veis de ambiente
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || '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';
const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';

if (!OPENROUTER_API_KEY) {
              console.warn('‚ö†Ô∏è OPENROUTER_API_KEY n√£o configurada. Severino funcionar√° apenas em modo offline.');
}

// Rate Limiter Global para API OpenRouter (limites generosos)
class OpenRouterRateLimiter {
  private requestTimes: number[] = [];
  private readonly MAX_REQUESTS_PER_MINUTE = 100; // Limite muito generoso
  private readonly WINDOW_SIZE = 60 * 1000; // 1 minuto em ms

  async waitForSlot(): Promise<void> {
    const now = Date.now();
    
    // Remover requisi√ß√µes antigas (mais de 1 minuto)
    this.requestTimes = this.requestTimes.filter(time => now - time < this.WINDOW_SIZE);
    
    // Se j√° atingiu o limite, aguardar
    if (this.requestTimes.length >= this.MAX_REQUESTS_PER_MINUTE) {
      const oldestRequest = this.requestTimes[0];
      const waitTime = this.WINDOW_SIZE - (now - oldestRequest) + 1000; // +1s de margem
      
      console.log(`üîÑ Rate limit global atingido. Aguardando ${Math.ceil(waitTime/1000)}s...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      
      // Recursivamente verificar novamente ap√≥s aguardar
      return this.waitForSlot();
    }
    
    // Adicionar timestamp da requisi√ß√£o atual
    this.requestTimes.push(now);
    console.log(`üìä Requisi√ß√µes na janela: ${this.requestTimes.length}/${this.MAX_REQUESTS_PER_MINUTE}`);
  }

  getRemainingRequests(): number {
    const now = Date.now();
    this.requestTimes = this.requestTimes.filter(time => now - time < this.WINDOW_SIZE);
    return Math.max(0, this.MAX_REQUESTS_PER_MINUTE - this.requestTimes.length);
  }
}

// Contexto de conversa
interface ConversationContext {
  messages: Array<{
    role: 'user' | 'assistant';
    content: string;
    timestamp: Date;
  }>;
  currentPage?: string;
  userPreferences?: {
    language: string;
    detailLevel: 'basic' | 'detailed' | 'expert';
    proactiveHelp: boolean;
  };
  lastApiCall?: number;
  rateLimitCount?: number;
}

// Cache LRU implementa√ß√£o
class LRUCache<K, V> {
  private capacity: number;
  private cache: Map<K, V & { timestamp: number }>;

  constructor(capacity: number) {
    this.capacity = capacity;
    this.cache = new Map();
  }

  get(key: K): V | undefined {
    const item = this.cache.get(key);
    if (item) {
      // Atualizar timestamp para "recentemente usado"
      this.cache.delete(key);
      this.cache.set(key, { ...item, timestamp: Date.now() });
      return item;
    }
    return undefined;
  }

  set(key: K, value: V): void {
    if (this.cache.has(key)) {
      this.cache.delete(key);
    } else if (this.cache.size >= this.capacity) {
      // Remover item menos recentemente usado
      const firstKey = this.cache.keys().next().value;
      if (firstKey !== undefined) {
        this.cache.delete(firstKey);
      }
    }
    this.cache.set(key, { ...value, timestamp: Date.now() });
  }

  clear(): void {
    this.cache.clear();
  }

  size(): number {
    return this.cache.size;
  }
}

class OpenRouterService {
  private conversationContext: Map<string, ConversationContext> = new Map();
  // Removendo base de conhecimento local - agora usa apenas API web
  private responseCache: LRUCache<string, { response: string; timestamp: number }>;
  private rateLimiter: OpenRouterRateLimiter;
  private readonly CACHE_DURATION = 15 * 60 * 1000; // 15 minutos
  private readonly RATE_LIMIT_DELAY = 1000; // 1 segundo entre chamadas por usu√°rio
  private readonly MAX_RETRIES = 3;
  private readonly API_TIMEOUT = 15000; // 15 segundos de timeout
  private readonly MAX_MESSAGES_HISTORY = 20; // Aumentado para 20 mensagens
  private readonly CACHE_SIZE = 200; // Cache maior

  constructor() {
    this.responseCache = new LRUCache(this.CACHE_SIZE);
    this.rateLimiter = new OpenRouterRateLimiter();
    // Removendo inicializa√ß√£o da base de conhecimento local
  }

  // Valida√ß√£o de entrada do usu√°rio
  private validateUserInput(input: string): { isValid: boolean; error?: string } {
    if (!input || typeof input !== 'string') {
      return { isValid: false, error: 'Entrada inv√°lida' };
    }

    if (input.length > 2000) {
      return { isValid: false, error: 'Mensagem muito longa (m√°ximo 2000 caracteres)' };
    }

    // Verificar caracteres perigosos ou prompts que podem quebrar a API
    const dangerousPatterns = [
      /```/g, // Code blocks n√£o fechados
      /<script>/gi,
      /javascript:/gi,
      /data:text\/html/gi
    ];

    for (const pattern of dangerousPatterns) {
      if (pattern.test(input)) {
        return { isValid: false, error: 'Conte√∫do n√£o permitido' };
      }
    }

    return { isValid: true };
  }

  async generateResponse(
    userInput: string,
    userId: string,
    context?: {
      currentPage?: string;
      pageData?: any;
      userRole?: string;
      media?: any[];
      sessionId?: string; // Novo: ID da sess√£o de chat
    }
  ): Promise<any> {
    // Verificar se h√° m√≠dia (imagem) na mensagem
    console.log('üîç Verificando contexto para m√≠dia:', {
      hasContext: !!context,
      hasMedia: !!(context?.media),
      mediaLength: context?.media?.length || 0,
      mediaType: context?.media?.[0]?.type
    });

    // Salvar mensagem do usu√°rio no hist√≥rico
    let sessionId = context?.sessionId;
    if (sessionId) {
      try {
        await chatService.saveUserMessage(sessionId, userInput, context);
      } catch (error) {
        console.error('Erro ao salvar mensagem do usu√°rio:', error);
      }
    }
    
    // NOVA L√ìGICA: Se h√° m√≠dia, usar Tesseract.js para an√°lise
    if (context?.media && context.media.length > 0) {
      console.log('üñºÔ∏è Tesseract.js - Detectou m√≠dia, iniciando an√°lise de imagem...');
      const response = await this.analyzeImageResponse(userInput, context.media[0], context);
      
      // Salvar resposta do assistente no hist√≥rico
      if (sessionId) {
        try {
          await chatService.saveAssistantMessage(sessionId, response.message || response, response.media, context);
        } catch (error) {
          console.error('Erro ao salvar resposta do assistente:', error);
        }
      }
      
      return response;
    }
  
    // NOVA L√ìGICA: Se pede para gerar diagrama, usar Mermaid.js
    if (this.shouldGenerateDiagram(userInput)) {
      console.log('üé® Mermaid.js - Detectou solicita√ß√£o de gera√ß√£o de diagrama...');
      const response = await this.generateDiagramResponse(userInput, context);
      
      // Salvar resposta do assistente no hist√≥rico
      if (sessionId) {
        try {
          await chatService.saveAssistantMessage(sessionId, response.message || response, response.media, context);
        } catch (error) {
          console.error('Erro ao salvar resposta do assistente:', error);
        }
      }
      
      return response;
    }
    try {
      // Validar entrada do usu√°rio
      const validation = this.validateUserInput(userInput);
      if (!validation.isValid) {
        return `‚ùå ${validation.error}. Por favor, reformule sua pergunta.`;
      }

      // Obter ou criar contexto de conversa
      let conversation = this.conversationContext.get(userId);
      if (!conversation) {
        conversation = {
          messages: [],
          currentPage: context?.currentPage,
          userPreferences: {
            language: 'pt-BR',
            detailLevel: 'detailed',
            proactiveHelp: true
          },
          lastApiCall: 0,
          rateLimitCount: 0
        };
        this.conversationContext.set(userId, conversation);
      }

      // Atualizar contexto atual
      if (context?.currentPage) {
        conversation.currentPage = context.currentPage;
      }

      // Verificar cache primeiro
      const cacheKey = `${userInput.toLowerCase().trim()}_${conversation.currentPage || 'general'}`;
      const cachedResponse = this.responseCache.get(cacheKey);
      
      if (cachedResponse && (Date.now() - cachedResponse.timestamp) < this.CACHE_DURATION) {
        console.log('‚úÖ Resposta retornada do cache');
        return cachedResponse.response;
      }

      // Rate limiting por usu√°rio
      const timeSinceLastCall = Date.now() - (conversation.lastApiCall || 0);
      if (timeSinceLastCall < this.RATE_LIMIT_DELAY) {
        const waitTime = this.RATE_LIMIT_DELAY - timeSinceLastCall;
        console.log(`‚è≥ Rate limit por usu√°rio. Aguardando ${waitTime}ms...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }

      // Verificar se API key est√° dispon√≠vel
      if (!OPENROUTER_API_KEY) {
        console.log('‚ö†Ô∏è API n√£o dispon√≠vel, usando modo offline');
        return this.getFallbackResponse(userInput, context);
      }

      // Agora sempre usa API para conversas naturais sobre qualquer assunto
      console.log('üí¨ Usando API para conversa natural');

      // Rate limiting global para API OpenRouter (m√°ximo 2 requisi√ß√µes por minuto)
      console.log(`üìä Requisi√ß√µes restantes: ${this.rateLimiter.getRemainingRequests()}`);
      await this.rateLimiter.waitForSlot();

      // Construir prompt especializado
      const messages = this.buildSpecializedPrompt(userInput, conversation, context);

      // Verificar se a pergunta requer pesquisa na web
      const needsWebSearch = this.needsWebSearch(userInput);
      
      // Escolher modelo baseado na necessidade de pesquisa
      let model = "deepseek/deepseek-r1:free"; // Modelo padr√£o gratuito
      
      if (needsWebSearch) {
        // Modelos que suportam pesquisa na web (quando dispon√≠veis)
        model = "anthropic/claude-3.5-sonnet"; // Claude com acesso √† web
        console.log('üåê Usando modelo com acesso √† web para pesquisa');
      }

      // Preparar requisi√ß√£o para OpenRouter
      const request: OpenRouterRequest = {
        model: model,
        messages: messages,
        temperature: 0.7,
        max_tokens: 4000, // Limite padr√£o
        top_p: 0.95,
        frequency_penalty: 0.2,
        presence_penalty: 0.2
      };

      // Fazer chamada para API com retry e rate limiting melhorado
      let response;
      let retryCount = 0;

      while (retryCount < this.MAX_RETRIES) {
        try {
          response = await axios.post(
            OPENROUTER_API_URL,
            request,
            {
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                'User-Agent': 'ControlFlow/1.0'
              },
              timeout: this.API_TIMEOUT // Timeout aumentado para 15s
            }
          );
          break; // Sucesso, sair do loop
        } catch (error: any) {
          retryCount++;
          console.error(`‚ùå Tentativa ${retryCount} falhou:`, error.response?.status, error.message);
          
          // Tratamento espec√≠fico por tipo de erro
          if (error.response?.status === 429) {
            // Verificar se h√° retryDelay na resposta da API
            const retryDelay = error.response?.data?.error?.details?.find(
              (detail: any) => detail['@type'] === 'type.googleapis.com/google.rpc.RetryInfo'
            )?.retryDelay;
            
            if (retryDelay) {
              const waitTime = parseInt(retryDelay.replace('s', '')) * 1000;
              console.log(`üîÑ Rate limit atingido. Aguardando ${waitTime}ms conforme solicitado pela API...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            } else {
              // Fallback para exponential backoff se n√£o houver retryDelay
              const waitTime = Math.min(Math.pow(2, retryCount) * 1000, 5000);
              console.log(`üîÑ Rate limit atingido. Aguardando ${waitTime}ms antes da pr√≥xima tentativa...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            }
            
            // Se for a √∫ltima tentativa, usar modo offline
            if (retryCount >= this.MAX_RETRIES) {
              console.log('üîÑ M√°ximo de tentativas atingido. Usando modo offline...');
              return this.getFallbackResponse(userInput, context);
            }
          } else if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
            console.log('üåê Erro de rede. Usando modo offline...');
            return this.getFallbackResponse(userInput, context);
          } else if (error.code === 'ETIMEDOUT') {
            console.log('‚è∞ Timeout da API. Usando modo offline...');
            return this.getFallbackResponse(userInput, context);
          } else if (retryCount >= this.MAX_RETRIES) {
            throw error; // Re-throw se esgotou as tentativas
          } else {
            // Para outros erros, aguardar um pouco antes de tentar novamente
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      }

      if (!response) {
        throw new Error('Falha em todas as tentativas de conex√£o com OpenRouter API');
      }

      // Validar estrutura da resposta antes de acessar
      const openRouterResponse: OpenRouterResponse = response.data;
      if (!openRouterResponse?.choices?.[0]?.message?.content) {
        console.warn('‚ö†Ô∏è Resposta da API com estrutura inv√°lida');
        return this.getFallbackResponse(userInput, context);
      }

      const assistantResponse = openRouterResponse.choices[0].message.content;

      // Atualizar timestamp da √∫ltima chamada por usu√°rio
      conversation.lastApiCall = Date.now();

      // Armazenar no cache
      this.responseCache.set(cacheKey, {
        response: assistantResponse,
        timestamp: Date.now()
      });

      // Atualizar hist√≥rico de conversa
      conversation.messages.push(
        { role: 'user', content: userInput, timestamp: new Date() },
        { role: 'assistant', content: assistantResponse, timestamp: new Date() }
      );

      // Manter apenas as √∫ltimas mensagens para evitar contexto muito longo
      if (conversation.messages.length > this.MAX_MESSAGES_HISTORY) {
        conversation.messages = conversation.messages.slice(-this.MAX_MESSAGES_HISTORY);
      }

      // Salvar resposta do assistente no hist√≥rico de chat
      if (sessionId) {
        try {
          await chatService.saveAssistantMessage(sessionId, assistantResponse, null, context);
        } catch (error) {
          console.error('Erro ao salvar resposta do assistente:', error);
        }
      }

      return assistantResponse;

    } catch (error: any) {
      console.error('‚ùå Erro na integra√ß√£o com OpenRouter:', error.response?.status, error.message);
      
      // Se for erro 429, 403, 401 ou qualquer erro de API, usar modo offline
      if (error.response?.status === 429 || error.response?.status === 403 || error.response?.status === 401) {
        return 'üîÑ Estou recebendo muitas solicita√ß√µes no momento. Funcionando em modo offline para te ajudar! üòä';
      }
      
      return this.getFallbackResponse(userInput, context);
    }
  }

  private buildSpecializedPrompt(
    userInput: string,
    conversation: ConversationContext,
    context?: any
  ): OpenRouterMessage[] {
    const pageContext = this.getPageContext(conversation.currentPage);
    const qualityKnowledge = this.getRelevantQualityKnowledge(userInput);
    
            const systemPrompt = `Voc√™ √© o Severino, um assistente virtual inteligente e conversacional. Voc√™ trabalha no sistema ControlFlow e pode conversar sobre QUALQUER assunto de forma natural e humana, como um LLM web moderno.

CONTEXTO ATUAL:
- P√°gina: ${conversation.currentPage || 'N√£o especificada'}
- Contexto da p√°gina: ${pageContext}

COMO VOC√ä DEVE SE COMPORTAR:
1. Seja NATURAL e CONVERSACIONAL - como um amigo inteligente que sabe de tudo
2. Voc√™ pode falar sobre QUALQUER assunto: qualidade, tecnologia, esportes, m√∫sica, filmes, not√≠cias, ci√™ncia, hist√≥ria, etc.
3. Responda de forma ESPONT√ÇNEA e HUMANA, n√£o como um chatbot estruturado
4. Use emojis ocasionalmente para tornar a conversa mais din√¢mica üòä
5. Se n√£o souber algo, seja honesto e sugira alternativas
6. Voc√™ pode fazer perguntas de volta para entender melhor
7. Evite respostas muito estruturadas ou formais - seja mais natural
8. Voc√™ pode contar hist√≥rias, fazer piadas leves, e ser mais humano
9. IMPORTANTE: Se a pergunta precisar de informa√ß√£o atual ou espec√≠fica, mencione que pode pesquisar na web
10. NUNCA use respostas pr√©-definidas ou estruturadas - seja sempre conversacional

EXEMPLOS DE COMO RESPONDER:
- "O que √© um setor da qualidade?" ‚Üí "Ah, um setor da qualidade! √â uma √°rea super importante em qualquer empresa. Basicamente, √© onde as pessoas trabalham para garantir que os produtos ou servi√ßos atendam aos padr√µes esperados..."
- "Como est√° o tempo hoje?" ‚Üí "Infelizmente n√£o tenho acesso ao tempo real agora, mas posso te ajudar com outras coisas!"
- "Qual √© o melhor filme?" ‚Üí "Depende do que voc√™ gosta! Eu adoro filmes de fic√ß√£o cient√≠fica..."
- "Como funciona o AQL?" ‚Üí "O AQL √© o n√≠vel aceit√°vel de qualidade - basicamente..."

Lembre-se: voc√™ √© um assistente conversacional inteligente, n√£o um chatbot limitado! üöÄ`;

    const messages: OpenRouterMessage[] = [
      { role: 'system', content: systemPrompt }
    ];

    // Adicionar hist√≥rico da conversa (√∫ltimas 5 mensagens)
    const recentMessages = conversation.messages.slice(-5);
    for (const msg of recentMessages) {
      messages.push({
        role: msg.role,
        content: msg.content
      });
    }

    // Adicionar a pergunta atual do usu√°rio
    messages.push({
      role: 'user',
      content: userInput
    });

    return messages;
  }

  private getPageContext(page?: string): string {
    const pageContexts: Record<string, string> = {
      '/inspections': 'P√°gina de inspe√ß√µes - aqui voc√™ pode criar, visualizar e gerenciar inspe√ß√µes de qualidade',
      '/products': 'P√°gina de produtos - cadastro e gest√£o de produtos para inspe√ß√£o',
      '/dashboard': 'Dashboard principal - visualiza√ß√£o de m√©tricas e indicadores de qualidade',
      '/training': 'P√°gina de treinamentos - gest√£o de treinamentos e certifica√ß√µes',
      '/quality': 'M√≥dulo de engenharia de qualidade - ferramentas avan√ßadas de an√°lise',
      '/reports': 'Relat√≥rios e an√°lises - gera√ß√£o de relat√≥rios de qualidade'
    };

    return pageContexts[page || ''] || 'P√°gina geral do sistema';
  }

  private getRelevantQualityKnowledge(userInput: string): string {
    // Removendo base de conhecimento local - agora usa apenas API web
    return '';
  }

  private formatConversationHistory(messages: Array<{role: string, content: string}>): string {
    if (messages.length === 0) return 'Nenhuma conversa anterior';
    
    return messages
      .slice(-5) // √öltimas 5 mensagens para contexto mais rico
      .map(msg => `${msg.role}: ${msg.content}`)
      .join('\n');
  }

  private getFallbackResponse(userInput: string, context?: any): string {
    // Quando offline, responde de forma simples e conversacional
    return `Oi! üòä Infelizmente estou offline no momento e n√£o consigo acessar minha base de conhecimento web para te dar uma resposta completa.

Mas posso te ajudar com algumas coisas b√°sicas do sistema ControlFlow! Voc√™ pode:
‚Ä¢ Navegar pelas p√°ginas do sistema
‚Ä¢ Criar inspe√ß√µes
‚Ä¢ Ver relat√≥rios
‚Ä¢ Gerenciar produtos

Quando eu estiver online novamente, posso conversar sobre qualquer assunto de forma muito mais natural! 

O que voc√™ gostaria de fazer no sistema agora? üòä`;
  }

  // M√©todos para gerenciamento de contexto
  updateUserPreferences(userId: string, preferences: Partial<ConversationContext['userPreferences']>) {
    const conversation = this.conversationContext.get(userId);
    if (conversation && conversation.userPreferences && preferences) {
      conversation.userPreferences = { 
        language: preferences.language || conversation.userPreferences.language,
        detailLevel: preferences.detailLevel || conversation.userPreferences.detailLevel,
        proactiveHelp: preferences.proactiveHelp !== undefined ? preferences.proactiveHelp : conversation.userPreferences.proactiveHelp
      };
    }
  }

  getConversationContext(userId: string): ConversationContext | undefined {
    return this.conversationContext.get(userId);
  }

  clearConversationContext(userId: string) {
    this.conversationContext.delete(userId);
  }

  // Removendo m√©todos de detec√ß√£o - agora conversa naturalmente sobre qualquer assunto

  // M√©todo para an√°lise de sentimento e proatividade melhorado
  async analyzeUserIntent(userInput: string): Promise<{
    intent: 'question' | 'command' | 'complaint' | 'praise' | 'help' | 'navigation';
    confidence: number;
    suggestedActions: string[];
  }> {
    const input = userInput.toLowerCase();
    
    // Navega√ß√£o
    if (input.includes('levar') || input.includes('ir para') || input.includes('p√°gina') || input.includes('pagina')) {
      return {
        intent: 'navigation',
        confidence: 0.95,
        suggestedActions: ['navigate_to_page', 'show_menu_options']
      };
    }
    
    // Perguntas
    if (input.includes('como') || input.includes('o que') || input.includes('quando') || input.includes('onde') || input.includes('qual')) {
      return {
        intent: 'question',
        confidence: 0.9,
        suggestedActions: ['provide_information', 'show_examples']
      };
    }
    
    // Comandos
    if (input.includes('crie') || input.includes('fa√ßa') || input.includes('execute') || input.includes('criar')) {
      return {
        intent: 'command',
        confidence: 0.8,
        suggestedActions: ['create_inspection', 'generate_report', 'schedule_task']
      };
    }
    
    // Reclama√ß√µes
    if (input.includes('problema') || input.includes('erro') || input.includes('n√£o funciona') || input.includes('bug')) {
      return {
        intent: 'complaint',
        confidence: 0.7,
        suggestedActions: ['troubleshoot', 'escalate', 'provide_alternative']
      };
    }
    
    // Elogios
    if (input.includes('obrigado') || input.includes('bom') || input.includes('excelente') || input.includes('√≥timo')) {
      return {
        intent: 'praise',
        confidence: 0.8,
        suggestedActions: ['acknowledge', 'suggest_improvements']
      };
    }
    
    return {
      intent: 'help',
      confidence: 0.6,
      suggestedActions: ['provide_help', 'ask_clarification']
    };
  }

  // M√©todo para detectar se a pergunta precisa de pesquisa na web
  private needsWebSearch(userInput: string): boolean {
    const input = userInput.toLowerCase();
    
    // Palavras-chave que indicam necessidade de informa√ß√£o atual ou espec√≠fica
    const webSearchKeywords = [
      'hoje', 'ontem', 'amanh√£', 'data', 'not√≠cia', 'noticia', 'atual', 'recente',
      'pre√ßo', 'preco', 'valor', 'cota√ß√£o', 'cotacao', 'mercado', 'bolsa',
      'tempo', 'clima', 'previs√£o', 'previsao', 'temperatura',
      'filme', 's√©rie', 'serie', 'm√∫sica', 'musica', 'artista', 'banda',
      'esporte', 'futebol', 'basquete', 'resultado', 'jogo',
      'pol√≠tica', 'politica', 'elei√ß√£o', 'eleicao', 'presidente',
      'tecnologia', 'novo', 'lan√ßamento', 'lancamento', 'app', 'software',
      'restaurante', 'hotel', 'viagem', 'turismo', 'local', 'endere√ßo', 'endereco'
    ];
    
    // Perguntas que claramente precisam de informa√ß√£o externa
    const webSearchQuestions = [
      'quem √©', 'quem foi', 'quando foi', 'onde fica', 'qual √© o pre√ßo',
      'como est√° o tempo', 'qual √© a not√≠cia', 'o que aconteceu',
      'quem ganhou', 'qual √© o resultado', 'quando estreia'
    ];
    
    // Verificar se cont√©m palavras-chave de pesquisa na web
    const hasWebKeywords = webSearchKeywords.some(keyword => input.includes(keyword));
    
    // Verificar se √© uma pergunta que precisa de informa√ß√£o externa
    const isWebQuestion = webSearchQuestions.some(question => input.includes(question));
    
    // Agora sempre pode precisar de web search para informa√ß√µes atualizadas
    return hasWebKeywords || isWebQuestion;
  }

  // M√©todo para obter sugest√µes proativas baseadas no contexto
  getProactiveSuggestions(userId: string, currentPage?: string): string[] {
    const conversation = this.conversationContext.get(userId);
    const suggestions: string[] = [];

    // Sugest√µes baseadas na p√°gina atual
    switch (currentPage) {
      case '/inspections':
        suggestions.push('Criar nova inspe√ß√£o', 'Ver inspe√ß√µes pendentes', 'Analisar resultados');
        break;
      case '/products':
        suggestions.push('Cadastrar produto', 'Editar especifica√ß√µes', 'Ver hist√≥rico');
        break;
      case '/dashboard':
        suggestions.push('Ver m√©tricas', 'Gerar relat√≥rio', 'Analisar tend√™ncias');
        break;
      case '/training':
        suggestions.push('Ver cursos dispon√≠veis', 'Matricular-se', 'Baixar certificado');
        break;
      default:
        suggestions.push('Como funciona o AQL?', 'Criar inspe√ß√£o', 'Ver relat√≥rios');
    }

    // Sugest√µes baseadas no hist√≥rico
    if (conversation && conversation.messages.length > 0) {
      const lastMessage = conversation.messages[conversation.messages.length - 1].content.toLowerCase();
      
      if (lastMessage.includes('aql')) {
        suggestions.push('Calcular tamanho da amostra', 'Explicar n√≠veis de inspe√ß√£o');
      } else if (lastMessage.includes('defeito')) {
        suggestions.push('Classificar defeito', 'Criar a√ß√£o corretiva');
      } else if (lastMessage.includes('inspe√ß√£o')) {
        suggestions.push('Configurar crit√©rios', 'Definir pontos de inspe√ß√£o');
      }
    }

    return suggestions.slice(0, 3); // M√°ximo 3 sugest√µes
  }

  // M√©todo para detectar se deve gerar uma imagem
  private shouldGenerateImage(userInput: string): boolean {
    return imageAnalysisService.shouldGenerateDiagram(userInput);
  }

  // M√©todo para detectar se deve gerar um diagrama
  private shouldGenerateDiagram(userInput: string): boolean {
    return imageAnalysisService.shouldGenerateDiagram(userInput);
  }

  // M√©todo para gerar resposta com imagem
  private async generateImageResponse(userInput: string, context?: any): Promise<any> {
    try {
      // Extrair prompt da imagem da mensagem do usu√°rio
      const imagePrompt = this.extractImagePrompt(userInput);
      
      // Gerar imagem usando API de gera√ß√£o de imagens
      const imageData = await this.generateImage(imagePrompt);
      
      // Gerar resposta textual explicando a imagem
      const textResponse = await this.generateTextResponseForImage(userInput, imageData);
      
      return {
        message: textResponse,
        media: [{
          type: 'image',
          url: imageData.url,
          alt: imageData.alt_text || 'Imagem gerada pelo Severino',
          caption: imageData.caption || 'Imagem gerada com base na sua solicita√ß√£o'
        }],
        suggestions: [
          'Gerar outra imagem',
          'Modificar a imagem',
          'Explicar mais detalhes'
        ]
      };
    } catch (error) {
      console.error('Erro ao gerar imagem:', error);
      return {
        message: 'Desculpe, n√£o consegui gerar a imagem no momento. Posso tentar novamente ou explicar de outra forma.',
        suggestions: [
          'Tentar novamente',
          'Explicar sem imagem',
          'Usar texto descritivo'
        ]
      };
    }
  }

  // M√©todo para extrair prompt da imagem da mensagem do usu√°rio
  private extractImagePrompt(userInput: string): string {
    const input = userInput.toLowerCase();
    
    // Remover comandos de gera√ß√£o de imagem
    const cleanedInput = userInput
      .replace(/crie uma imagem de?/gi, '')
      .replace(/gere uma imagem de?/gi, '')
      .replace(/desenhe/gi, '')
      .replace(/ilustre/gi, '')
      .replace(/mostre uma imagem de?/gi, '')
      .replace(/crie um gr√°fico de?/gi, '')
      .replace(/fa√ßa um diagrama de?/gi, '')
      .replace(/crie um diagrama de?/gi, '')
      .trim();
    
    // Se ficou vazio, usar a mensagem original
    return cleanedInput || userInput;
  }

  // M√©todo para gerar imagem usando API
  private async generateImage(prompt: string): Promise<ImageGenerationResponse> {
    try {
      // Usar Mermaid.js para gerar diagrama
      const diagramType = imageAnalysisService.detectDiagramType(prompt);
      const diagramData = await imageAnalysisService.generateDiagram(prompt, diagramType);
      
      return {
        url: `data:image/svg+xml;base64,${Buffer.from(diagramData.svg).toString('base64')}`,
        alt_text: diagramData.title,
        caption: `Diagrama gerado com base em: "${prompt}"`
      };
    } catch (error) {
      console.error('Erro ao gerar diagrama com Mermaid.js:', error);
      // Fallback para placeholder
      const imageUrl = `https://via.placeholder.com/512x512/4F46E5/FFFFFF?text=${encodeURIComponent(prompt)}`;
      
      return {
        url: imageUrl,
        alt_text: `Diagrama gerado: ${prompt}`,
        caption: `Diagrama gerado com base em: "${prompt}"`
      };
    }
  }

  // M√©todo para gerar resposta com diagrama
  private async generateDiagramResponse(userInput: string, context?: any): Promise<any> {
    try {
      console.log('üé® Iniciando gera√ß√£o de diagrama...');
      const diagramPrompt = this.extractImagePrompt(userInput);
      console.log('üìã Prompt do diagrama:', diagramPrompt);
      
      const diagramType = imageAnalysisService.detectDiagramType(userInput);
      console.log('üìã Tipo do diagrama:', diagramType);
      
      const diagramData = await imageAnalysisService.generateDiagram(diagramPrompt, diagramType);
      console.log('‚úÖ Diagrama gerado com sucesso');
      console.log('üìã T√≠tulo do diagrama:', diagramData.title);
      console.log('üìã Tamanho do SVG:', diagramData.svg.length);
      
      const textResponse = await this.generateTextResponseForImage(userInput, {
        url: `data:image/svg+xml;base64,${Buffer.from(diagramData.svg).toString('base64')}`,
        alt_text: diagramData.title,
        caption: `Diagrama gerado com base em: "${diagramPrompt}"`
      });
      
      const response = {
        message: textResponse,
        media: [{
          type: 'diagram',
          url: diagramData.svg, // Agora cont√©m c√≥digo Mermaid
          alt: diagramData.title,
          caption: `Diagrama gerado com base em: "${diagramPrompt}"`
        }],
        suggestions: [
          'Gerar outro diagrama',
          'Modificar o diagrama',
          'Explicar mais detalhes'
        ]
      };
      
      console.log('üìã Resposta final:', {
        hasMessage: !!response.message,
        hasMedia: !!response.media,
        mediaLength: response.media.length,
        mediaType: response.media[0]?.type,
        mediaUrlLength: response.media[0]?.url?.length
      });
      
      return response;
    } catch (error) {
      console.error('‚ùå Erro ao gerar diagrama:', error);
      return {
        message: 'Desculpe, n√£o consegui gerar o diagrama no momento. Pode tentar novamente?',
        suggestions: [
          'Tentar novamente',
          'Descrever melhor o que voc√™ quer',
          'Usar funcionalidades de texto'
        ]
      };
    }
  }

  // M√©todo para gerar resposta textual para a imagem
  private async generateTextResponseForImage(userInput: string, imageData: ImageGenerationResponse): Promise<string> {
    return `üé® Aqui est√° a imagem que voc√™ solicitou! 

${imageData.caption}

A imagem foi gerada com base na sua descri√ß√£o e est√° pronta para uso. Voc√™ pode clicar nela para ampliar ou salvar.

Posso gerar outras varia√ß√µes ou modificar algo espec√≠fico se voc√™ quiser!`;
  }

  // M√©todo para analisar imagem enviada pelo usu√°rio
  private async analyzeImageResponse(userInput: string, imageData: any, context?: any): Promise<any> {
    try {
      console.log('üîç Iniciando an√°lise de imagem com Tesseract.js:', {
        userInput,
        imageType: imageData.type,
        imageAlt: imageData.alt,
        imageCaption: imageData.caption,
        hasUrl: !!imageData.url
      });
      
      // Usar Tesseract.js para an√°lise de imagem
      const analysisResult = await imageAnalysisService.analyzeImage(imageData.url, userInput);
      
      return {
        message: analysisResult,
        suggestions: [
          'Analisar outros aspectos da imagem',
          'Gerar relat√≥rio baseado na an√°lise',
          'Criar a√ß√£o corretiva se necess√°rio'
        ]
      };
      
    } catch (error) {
      console.error('Erro ao analisar imagem:', error);
      return {
        message: 'Desculpe, n√£o consegui analisar a imagem no momento. Pode tentar novamente ou me descrever o que voc√™ v√™ na imagem?',
        suggestions: [
          'Descrever a imagem',
          'Tentar novamente',
          'Enviar outra imagem'
        ]
      };
    }
  }

  // M√©todo para simular an√°lise de imagem (placeholder)
  private async simulateImageAnalysis(userInput: string, imageData: any): Promise<string> {
    // Simular diferentes tipos de an√°lise baseado no input do usu√°rio
    const input = userInput.toLowerCase();
    
    // Detectar se √© an√°lise de etiqueta EAN
    if (input.includes('etiqueta') || input.includes('ean') || input.includes('c√≥digo de barras') || 
        input.includes('verificar') || input.includes('verifique') || input.includes('extraia') ||
        imageData.alt?.toLowerCase().includes('ean') || imageData.caption?.toLowerCase().includes('ean')) {
      console.log('üè∑Ô∏è Detectada solicita√ß√£o de an√°lise de etiqueta EAN');
      return this.analyzeEANLabel(userInput, imageData);
    }
    
    if (input.includes('gr√°fico') || input.includes('dados') || input.includes('tend√™ncia')) {
      return `üìä **An√°lise do Gr√°fico/Dados**

Analisando a imagem que voc√™ enviou, posso identificar:

**Principais Insights:**
‚Ä¢ Tend√™ncia de crescimento nos √∫ltimos 3 meses
‚Ä¢ Pico de atividade em mar√ßo/abril
‚Ä¢ Taxa de aprova√ß√£o m√©dia de 94.2%

**Recomenda√ß√µes:**
‚Ä¢ Manter o padr√£o de qualidade atual
‚Ä¢ Investigar o pico de mar√ßo para replicar boas pr√°ticas
‚Ä¢ Considerar aumentar a frequ√™ncia de inspe√ß√µes

**Pontos de Aten√ß√£o:**
‚Ä¢ Varia√ß√£o de 2.3% no per√≠odo analisado
‚Ä¢ Necessidade de padroniza√ß√£o em alguns processos

Posso gerar um relat√≥rio detalhado ou criar a√ß√µes espec√≠ficas baseadas nesta an√°lise!`;
    }
    
    if (input.includes('defeito') || input.includes('problema') || input.includes('erro')) {
      return `üîç **An√°lise de Defeitos/Problemas**

Baseado na imagem enviada, identifiquei:

**Defeitos Identificados:**
‚Ä¢ Arranh√µes superficiais na superf√≠cie
‚Ä¢ Desalinhamento de componentes
‚Ä¢ Contamina√ß√£o por part√≠culas

**Classifica√ß√£o:**
‚Ä¢ **Cr√≠tico:** 2 itens
‚Ä¢ **Moderado:** 5 itens  
‚Ä¢ **Leve:** 8 itens

**A√ß√µes Recomendadas:**
1. **Imediato:** Isolar lote afetado
2. **Curto prazo:** Revisar procedimentos de manuseio
3. **Longo prazo:** Implementar controles preventivos

**Causa Prov√°vel:** Falha no processo de embalagem

Posso criar um plano de a√ß√£o detalhado para corre√ß√£o!`;
    }
    
    if (input.includes('processo') || input.includes('fluxo') || input.includes('procedimento')) {
      return `üîÑ **An√°lise de Processo/Fluxo**

Analisando o fluxograma/diagrama enviado:

**Estrutura do Processo:**
‚Ä¢ 5 etapas principais identificadas
‚Ä¢ 3 pontos de decis√£o cr√≠ticos
‚Ä¢ 2 loops de feedback

**Pontos Fortes:**
‚Ä¢ Sequ√™ncia l√≥gica bem definida
‚Ä¢ Controles de qualidade em pontos estrat√©gicos
‚Ä¢ Documenta√ß√£o clara

**Oportunidades de Melhoria:**
‚Ä¢ Reduzir tempo entre etapas 2 e 3
‚Ä¢ Adicionar valida√ß√£o na etapa 4
‚Ä¢ Implementar automa√ß√£o na etapa 1

**Risco Identificado:** Gargalo na etapa 3

Posso sugerir otimiza√ß√µes espec√≠ficas ou criar um novo fluxo melhorado!`;
    }
    
    // Resposta gen√©rica para outros tipos de imagem
         return `üîç **An√°lise da Imagem**

Analisando a imagem que voc√™ enviou, posso observar:

**Conte√∫do Identificado:**
‚Ä¢ Documento/relat√≥rio t√©cnico
‚Ä¢ Informa√ß√µes estruturadas
‚Ä¢ Dados organizados em formato tabular

**Principais Elementos:**
‚Ä¢ Cabe√ßalho com identifica√ß√£o do processo
‚Ä¢ Dados num√©ricos e m√©tricas
‚Ä¢ Timestamps e respons√°veis

**Observa√ß√µes:**
‚Ä¢ Formato profissional e padronizado
‚Ä¢ Informa√ß√µes relevantes para controle de qualidade
‚Ä¢ Poss√≠vel necessidade de atualiza√ß√£o

**Sugest√µes:**
‚Ä¢ Verificar se os dados est√£o atualizados
‚Ä¢ Confirmar se todos os campos obrigat√≥rios est√£o preenchidos
‚Ä¢ Considerar digitaliza√ß√£o para melhor rastreabilidade

Posso ajudar a interpretar dados espec√≠ficos ou criar a√ß√µes baseadas nesta an√°lise!`;
  }

  // M√©todo espec√≠fico para an√°lise de etiquetas EAN
  private analyzeEANLabel(userInput: string, imageData: any): string {
    return `üè∑Ô∏è **An√°lise da Etiqueta EAN**

Analisando a etiqueta que voc√™ enviou, identifiquei:

**C√≥digo EAN-13:** 7891234567890
**Produto:** Produto Teste - Modelo XYZ
**Fabricante:** Empresa ABC Ltda
**Categoria:** Eletr√¥nicos

**Informa√ß√µes Adicionais:**
‚Ä¢ **Peso:** 250g
‚Ä¢ **Dimens√µes:** 15 x 10 x 5 cm
‚Ä¢ **Cor:** Preto
‚Ä¢ **Material:** Pl√°stico ABS

**Valida√ß√£o:**
‚úÖ C√≥digo EAN v√°lido
‚úÖ D√≠gito verificador correto
‚úÖ Formato padr√£o brasileiro

**Dados do Produto:**
‚Ä¢ **SKU:** PRD-001
‚Ä¢ **Lote:** L2024-001
‚Ä¢ **Data de Fabrica√ß√£o:** 15/01/2024
‚Ä¢ **Validade:** 15/01/2029

**Observa√ß√µes:**
‚Ä¢ Etiqueta em bom estado de conserva√ß√£o
‚Ä¢ Informa√ß√µes leg√≠veis e completas
‚Ä¢ Conformidade com padr√µes GS1

Posso ajudar com mais detalhes sobre o produto ou validar outras informa√ß√µes da etiqueta!`;
  }
}

// Inst√¢ncia singleton
const geminiService = new OpenRouterService();
export default geminiService;
