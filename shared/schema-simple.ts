import { pgTable, text, integer, real, boolean, timestamp, uuid, jsonb } from "drizzle-orm/pg-core";

export const users = pgTable("users", {
  id: uuid("id").primaryKey().defaultRandom(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  name: text("name").notNull(),
  role: text("role").notNull(),
  businessUnit: text("business_unit"),
  photo: text("photo"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const products = pgTable("products", {
  id: uuid("id").primaryKey().defaultRandom(),
  code: text("code").notNull().unique(),
  ean: text("ean"),
  description: text("description").notNull(),
  category: text("category").notNull(),
  businessUnit: text("business_unit").notNull(),
  technicalParameters: text("technical_parameters"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const inspectionPlans = pgTable("inspection_plans", {
  id: uuid("id").primaryKey().defaultRandom(),
  planCode: text("plan_code").notNull().unique(),
  planName: text("plan_name").notNull(),
  planType: text("plan_type").notNull(),
  version: text("version").notNull(),
  status: text("status").default('draft').notNull(),
  productId: uuid("product_id").references(() => products.id),
  productCode: text("product_code"),
  productName: text("product_name").notNull(),
  productFamily: text("product_family"),
  businessUnit: text("business_unit").notNull(),
  inspectionType: text("inspection_type").notNull(),
  aqlCritical: real("aql_critical").default(0),
  aqlMajor: real("aql_major").default(2.5),
  aqlMinor: real("aql_minor").default(4.0),
  samplingMethod: text("sampling_method").notNull(),
  inspectionLevel: text("inspection_level").default('II'),
  inspectionSteps: text("inspection_steps").notNull(),
  checklists: text("checklists").notNull(),
  requiredParameters: text("required_parameters").notNull(),
  requiredPhotos: text("required_photos"),
  labelFile: text("label_file"),
  manualFile: text("manual_file"),
  packagingFile: text("packaging_file"),
  artworkFile: text("artwork_file"),
  additionalFiles: text("additional_files"),
  createdBy: uuid("created_by").notNull().references(() => users.id),
  approvedBy: uuid("approved_by").references(() => users.id),
  approvedAt: timestamp("approved_at"),
  observations: text("observations"),
  specialInstructions: text("special_instructions"),
  isActive: boolean("is_active").default(true).notNull(),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});
