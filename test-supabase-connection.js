// Script para testar conex√£o com Supabase
// Execute ap√≥s configurar as vari√°veis de ambiente

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testSupabaseConnection() {
    console.log('üîç Testando conex√£o com Supabase...\n');

    // Verificar vari√°veis de ambiente
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_ANON_KEY;

    if (!supabaseUrl || !supabaseKey) {
        console.error('‚ùå Vari√°veis de ambiente n√£o configuradas!');
        console.error('üìù Configure o arquivo .env.local com suas credenciais do Supabase');
        return;
    }

    console.log('‚úÖ Vari√°veis de ambiente configuradas');
    console.log(`üîó URL: ${supabaseUrl}`);
    console.log(`üîë Chave: ${supabaseKey.substring(0, 20)}...\n`);

    try {
        // Criar cliente Supabase
        const supabase = createClient(supabaseUrl, supabaseKey);
        console.log('üîå Cliente Supabase criado com sucesso\n');

        // Testar conex√£o b√°sica
        console.log('üì° Testando conex√£o b√°sica...');
        const { data: testData, error: testError } = await supabase
            .from('inspection_plans')
            .select('count')
            .limit(1);

        if (testError) {
            console.log('‚ö†Ô∏è  Erro na consulta (pode ser normal se a tabela n√£o existir ainda):');
            console.log(`   ${testError.message}\n`);
        } else {
            console.log('‚úÖ Conex√£o b√°sica funcionando\n');
        }

        // Verificar se as novas tabelas existem
        console.log('üìä Verificando estrutura do banco...');
        const tablesToCheck = [
            'flow_nodes',
            'flow_connections', 
            'flow_plans',
            'criteria_blocks',
            'criteria_categories',
            'smart_inspections',
            'nc_notifications',
            'system_health_logs'
        ];

        for (const table of tablesToCheck) {
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('*')
                    .limit(1);

                if (error) {
                    console.log(`‚ùå ${table}: ${error.message}`);
                } else {
                    console.log(`‚úÖ ${table}: Tabela encontrada`);
                }
            } catch (err) {
                console.log(`‚ùå ${table}: Erro ao acessar`);
            }
        }

        console.log('\nüîç Verificando dados iniciais...');

        // Verificar categorias padr√£o
        try {
            const { data: categories, error } = await supabase
                .from('criteria_categories')
                .select('*');

            if (error) {
                console.log('‚ùå Erro ao verificar categorias:', error.message);
            } else if (categories && categories.length > 0) {
                console.log(`‚úÖ ${categories.length} categorias encontradas:`);
                categories.forEach(cat => {
                    console.log(`   ‚Ä¢ ${cat.name} (${cat.color})`);
                });
            } else {
                console.log('‚ö†Ô∏è  Nenhuma categoria encontrada (execute a migra√ß√£o primeiro)');
            }
        } catch (err) {
            console.log('‚ùå Erro ao verificar categorias:', err.message);
        }

        // Verificar crit√©rios padr√£o
        try {
            const { data: criteria, error } = await supabase
                .from('criteria_blocks')
                .select('*');

            if (error) {
                console.log('‚ùå Erro ao verificar crit√©rios:', error.message);
            } else if (criteria && criteria.length > 0) {
                console.log(`‚úÖ ${criteria.length} crit√©rios encontrados:`);
                criteria.forEach(crit => {
                    console.log(`   ‚Ä¢ ${crit.title} (${crit.category})`);
                });
            } else {
                console.log('‚ö†Ô∏è  Nenhum crit√©rio encontrado (execute a migra√ß√£o primeiro)');
            }
        } catch (err) {
            console.log('‚ùå Erro ao verificar crit√©rios:', err.message);
        }

        console.log('\nüéØ TESTE DE FUNCIONALIDADES AVAN√áADAS');

        // Testar inser√ß√£o de dados (apenas se as tabelas existirem)
        try {
            const { data: testInsert, error: insertError } = await supabase
                .from('system_health_logs')
                .insert({
                    check_type: 'test',
                    status: 'healthy',
                    metric_value: 100,
                    metric_unit: 'test_unit',
                    details: { test: true }
                })
                .select();

            if (insertError) {
                console.log('‚ùå Teste de inser√ß√£o falhou:', insertError.message);
            } else {
                console.log('‚úÖ Teste de inser√ß√£o funcionando');
                
                // Limpar dados de teste
                await supabase
                    .from('system_health_logs')
                    .delete()
                    .eq('check_type', 'test');
                console.log('üßπ Dados de teste removidos');
            }
        } catch (err) {
            console.log('‚ùå Erro no teste de inser√ß√£o:', err.message);
        }

        console.log('\nüìã RESUMO DOS TESTES:');
        console.log('‚úÖ Conex√£o com Supabase estabelecida');
        console.log('‚úÖ Cliente criado com sucesso');
        console.log('‚úÖ Estrutura do banco verificada');
        console.log('‚úÖ Dados iniciais verificados');
        console.log('‚úÖ Funcionalidades b√°sicas testadas');

        console.log('\nüöÄ PR√ìXIMOS PASSOS:');
        console.log('1. Se as tabelas n√£o existirem, execute a migra√ß√£o no Supabase');
        console.log('2. Teste as funcionalidades do Flow Builder');
        console.log('3. Teste a cria√ß√£o de crit√©rios');
        console.log('4. Teste a execu√ß√£o inteligente de inspe√ß√µes');

    } catch (error) {
        console.error('‚ùå Erro cr√≠tico na conex√£o:', error.message);
        console.error('üìù Verifique suas credenciais e configura√ß√µes');
    }
}

// Executar teste
testSupabaseConnection().catch(console.error);
