services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: enso_postgres_dev
    environment:
      POSTGRES_DB: enso_db_dev
      POSTGRES_USER: enso_user
      POSTGRES_PASSWORD: enso_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - enso_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U enso_user -d enso_db_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache e sess√µes
  redis:
    image: redis:7-alpine
    container_name: enso_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - enso_dev_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Supabase Local (para desenvolvimento)
  supabase:
    image: supabase/postgres:15.1.0.117
    container_name: enso_supabase_dev
    environment:
      POSTGRES_PASSWORD: postgres
      JWT_SECRET: your-super-secret-jwt-token-with-at-least-32-characters-long
      POSTGRES_DB: postgres
    ports:
      - "5433:5432"
    volumes:
      - supabase_data_dev:/var/lib/postgresql/data
    networks:
      - enso_dev_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: enso_backend_dev
    env_file:
      - .env
    environment:
      # Server
      PORT: 5002
      NODE_ENV: development
      HOST: 0.0.0.0
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # CORS
      CORS_ORIGIN: http://localhost:3000,http://frontend:3000
      
    ports:
      - "5002:5002"
    volumes:
      - ./server:/app/server:delegated
      - ./shared:/app/shared:delegated
      - ./migrations:/app/migrations:delegated
      - ./uploads:/app/uploads:delegated
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./drizzle.config.ts:/app/drizzle.config.ts:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - enso_dev_network
    restart: unless-stopped
    command: npm run dev

  # Frontend React
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.frontend
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: enso_frontend_dev
    environment:
      VITE_API_URL: http://localhost:5002
      VITE_SUPABASE_URL: https://smvohmdytczfouslcaju.supabase.co
      VITE_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtdm9obWR5dGN6Zm91c2xjYWp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1MTk1MzQsImV4cCI6MjA3MTA5NTUzNH0.0qJpEQVooxEDsRa26MhqDk76ACb7Tg-Qutswoegdk7U
      NODE_ENV: development
      # Cache busting
      BUILD_TIMESTAMP: ${BUILD_TIMESTAMP:-$(Get-Date -Format "yyyyMMddHHmmss")}
    ports:
      - "3000:3000"
    volumes:
      - ./client/src:/app/src:delegated
      - ./client/public:/app/public:delegated
      - ./client/package.json:/app/package.json:ro
      - ./client/package-lock.json:/app/package-lock.json:ro
      - ./client/vite.config.ts:/app/vite.config.ts:ro
      - ./client/tsconfig.json:/app/tsconfig.json:ro
      - ./client/tailwind.config.ts:/app/tailwind.config.ts:ro
      - ./client/postcss.config.js:/app/postcss.config.js:ro
      - ./client/index.html:/app/index.html:ro
    depends_on:
      - backend
    networks:
      - enso_dev_network
    restart: unless-stopped

  # Adminer (Interface web para PostgreSQL)
  adminer:
    image: adminer:latest
    container_name: enso_adminer_dev
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - enso_dev_network
    restart: unless-stopped

  # Redis Commander (Interface web para Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: enso_redis_commander_dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - enso_dev_network
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  supabase_data_dev:
    driver: local

networks:
  enso_dev_network:
    driver: bridge
