// Script para debugar o problema da API de fornecedores
// Execute este script no console do navegador

console.log('üîç Debugando API de fornecedores...');

async function debugSuppliersAPI() {
  try {
    // 1. Verificar se o servidor est√° respondendo
    console.log('1Ô∏è‚É£ Verificando servidor...');
    const healthResponse = await fetch('http://localhost:5002/health');
    console.log('üè• Servidor:', healthResponse.status === 200 ? 'Online' : 'Erro');
    
    // 2. Verificar se h√° token de autentica√ß√£o
    console.log('2Ô∏è‚É£ Verificando autentica√ß√£o...');
    const token = localStorage.getItem('supabase.auth.token') || 
                  sessionStorage.getItem('supabase.auth.token');
    
    if (!token) {
      console.log('‚ùå Token n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Token encontrado');
    
    // 3. Testar API com diferentes headers
    console.log('3Ô∏è‚É£ Testando API com diferentes configura√ß√µes...');
    
    // Teste 1: Headers b√°sicos
    console.log('üì° Teste 1: Headers b√°sicos');
    const response1 = await fetch('http://localhost:5002/api/suppliers', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Status:', response1.status);
    console.log('Headers:', Object.fromEntries(response1.headers.entries()));
    
    if (!response1.ok) {
      const error1 = await response1.text();
      console.log('Erro:', error1);
    } else {
      const data1 = await response1.json();
      console.log('Sucesso:', data1);
    }
    
    // Teste 2: Sem Content-Type
    console.log('üì° Teste 2: Sem Content-Type');
    const response2 = await fetch('http://localhost:5002/api/suppliers', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log('Status:', response2.status);
    
    if (!response2.ok) {
      const error2 = await response2.text();
      console.log('Erro:', error2);
    } else {
      const data2 = await response2.json();
      console.log('Sucesso:', data2);
    }
    
    // Teste 3: Com query parameters
    console.log('üì° Teste 3: Com query parameters');
    const response3 = await fetch('http://localhost:5002/api/suppliers?page=1&limit=10', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Status:', response3.status);
    
    if (!response3.ok) {
      const error3 = await response3.text();
      console.log('Erro:', error3);
    } else {
      const data3 = await response3.json();
      console.log('Sucesso:', data3);
    }
    
    // 4. Verificar se outras APIs funcionam
    console.log('4Ô∏è‚É£ Testando outras APIs...');
    
    const productsResponse = await fetch('http://localhost:5002/api/products', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('API Products:', productsResponse.status);
    
    const statsResponse = await fetch('http://localhost:5002/api/suppliers/stats/overview', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('API Stats:', statsResponse.status);
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error.message);
  }
}

// Fun√ß√£o para testar com token espec√≠fico
async function testWithSpecificToken(token) {
  console.log('üß™ Testando com token espec√≠fico...');
  
  try {
    const response = await fetch('http://localhost:5002/api/suppliers', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Status:', response.status);
    console.log('Headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Sucesso:', data);
    } else {
      const error = await response.text();
      console.log('‚ùå Erro:', error);
      
      // Tentar fazer parse do erro
      try {
        const errorJson = JSON.parse(error);
        console.log('‚ùå Erro detalhado:', errorJson);
      } catch {
        console.log('‚ùå Erro em texto:', error);
      }
    }
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

// Fun√ß√£o para verificar logs do servidor
function checkServerLogs() {
  console.log('üìã Verificando logs do servidor...');
  console.log('üí° Dica: Verifique o terminal onde o servidor est√° rodando para ver logs detalhados do erro 500');
  console.log('üí° O erro pode estar relacionado a:');
  console.log('   - Problemas na conex√£o com o banco de dados');
  console.log('   - Erro na query SQL');
  console.log('   - Problemas no schema do Drizzle');
  console.log('   - Erro na autentica√ß√£o do Supabase');
}

// Executar debug
console.log('üöÄ Iniciando debug completo...');
debugSuppliersAPI();
checkServerLogs();

// Expor fun√ß√µes para uso manual
window.debugSuppliersAPI = debugSuppliersAPI;
window.testWithSpecificToken = testWithSpecificToken;
window.checkServerLogs = checkServerLogs;

console.log('üõ†Ô∏è Fun√ß√µes dispon√≠veis:');
console.log('- debugSuppliersAPI(): Debug completo da API');
console.log('- testWithSpecificToken(token): Testar com token espec√≠fico');
console.log('- checkServerLogs(): Verificar logs do servidor');
